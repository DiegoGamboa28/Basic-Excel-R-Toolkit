
/**
 * the Julia REPL supports autotranslation of latex symbols. we want to do
 * the same thing. originally we were using html entities (via he), which is 
 * a reasonable subset, but we can borrow Julia's list to get the full set.
 */

"use strict";

const https = require('https');
const fs = require('fs');
const path = require('path');

/**
 * this is a rawgit link generated from the latest commit (at time of writing).
 * any updates will require updating the tag.
 */
const source = "https://cdn.rawgit.com/JuliaLang/julia/ceca80c8ecb70c422bea9ff83483f1bceac494d7/stdlib/REPL/src/latex_symbols.jl";

let output_file = null;
let force_overwrite = false;

for( let i = 0; i< process.argv.length; i++ ){
  if( process.argv[i] === '-o' && i < process.argv.length - 1 ){
    output_file = process.argv[++i];
  }
  else if( process.argv[i] === '-f' ) force_overwrite = true;
}

if( null === output_file ){
  console.info( "Call with -o output file [-f]")
  return;
}

output_file = path.resolve(output_file);

https.get(source, response => {
  response.setEncoding("utf8");
  let text = "";
  response.on("data", data => text += data);
  response.on("end", () => process_content(text));
});

let process_content = function(text){

  let symbols = {};

  // current assumption: symbols are on lines by themselves, as
  // "\\name" => "symbol" with optional comma (actually last line
  // has a comma as well).

  // if we read this as plain text, then we're going to see escaped
  // backslashes in the strings, so double.

  // we're not storing leading backslashes at all, so drop x2.

  let regex = /^"\\\\(.+?)"\s+=>\s+"(.+?)"/;
  text.split("\n").map(x => x.trim()).forEach(line => {
    let m = line.match(regex);
    if(m) symbols[m[1]] = m[2];
  });

  // we're adding some info. (at least for now, we know that
  // the chrome/node serializer will leave this at the top)

  let object = {
    metadata: {
      DESCRIPTION: "This is a map of latex symbols for the julia shell.",
      SOURCE: source,
      DATE: new Date().toDateString(),
      NOTE: "This file was generated by a tool. It may be overwritten."
    },
    symbols
  }

  fs.access(output_file, err => {
    if( !err && !force_overwrite ){
      console.info( "The file already exists. Not overwriting without -f flag.");
      return;
    }
    fs.writeFile(output_file, JSON.stringify(object, undefined, 2), "utf8", err => {
      if(err) console.error(err);
      else console.info( "Wrote OK");
    });
  });

}

