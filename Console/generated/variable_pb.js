/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BERTBuffers.Array', null, global);
goog.exportSymbol('proto.BERTBuffers.CallResponse', null, global);
goog.exportSymbol('proto.BERTBuffers.CallTarget', null, global);
goog.exportSymbol('proto.BERTBuffers.CallType', null, global);
goog.exportSymbol('proto.BERTBuffers.Code', null, global);
goog.exportSymbol('proto.BERTBuffers.Complex', null, global);
goog.exportSymbol('proto.BERTBuffers.CompositeFunctionCall', null, global);
goog.exportSymbol('proto.BERTBuffers.Console', null, global);
goog.exportSymbol('proto.BERTBuffers.EnumType', null, global);
goog.exportSymbol('proto.BERTBuffers.EnumValue', null, global);
goog.exportSymbol('proto.BERTBuffers.Error', null, global);
goog.exportSymbol('proto.BERTBuffers.ErrorType', null, global);
goog.exportSymbol('proto.BERTBuffers.ExternalPointer', null, global);
goog.exportSymbol('proto.BERTBuffers.FunctionDescriptor', null, global);
goog.exportSymbol('proto.BERTBuffers.FunctionElement', null, global);
goog.exportSymbol('proto.BERTBuffers.FunctionList', null, global);
goog.exportSymbol('proto.BERTBuffers.SheetReference', null, global);
goog.exportSymbol('proto.BERTBuffers.Variable', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.Complex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BERTBuffers.Complex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.Complex.displayName = 'proto.BERTBuffers.Complex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.Complex.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.Complex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.Complex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Complex.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    i: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.Complex}
 */
proto.BERTBuffers.Complex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.Complex;
  return proto.BERTBuffers.Complex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.Complex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.Complex}
 */
proto.BERTBuffers.Complex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setR(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setI(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.Complex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.Complex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.Complex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Complex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getI();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double r = 1;
 * @return {number}
 */
proto.BERTBuffers.Complex.prototype.getR = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.BERTBuffers.Complex.prototype.setR = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double i = 2;
 * @return {number}
 */
proto.BERTBuffers.Complex.prototype.getI = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.BERTBuffers.Complex.prototype.setI = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.Array.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.Array.displayName = 'proto.BERTBuffers.Array';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.Array.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    rows: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cols: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.BERTBuffers.Variable.toObject, includeInstance),
    rownamesList: jspb.Message.getRepeatedField(msg, 4),
    colnamesList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.Array}
 */
proto.BERTBuffers.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.Array;
  return proto.BERTBuffers.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.Array}
 */
proto.BERTBuffers.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRows(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCols(value);
      break;
    case 3:
      var value = new proto.BERTBuffers.Variable;
      reader.readMessage(value,proto.BERTBuffers.Variable.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRownames(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addColnames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRows();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCols();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BERTBuffers.Variable.serializeBinaryToWriter
    );
  }
  f = message.getRownamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getColnamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional int32 rows = 1;
 * @return {number}
 */
proto.BERTBuffers.Array.prototype.getRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BERTBuffers.Array.prototype.setRows = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 cols = 2;
 * @return {number}
 */
proto.BERTBuffers.Array.prototype.getCols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BERTBuffers.Array.prototype.setCols = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Variable data = 3;
 * @return {!Array.<!proto.BERTBuffers.Variable>}
 */
proto.BERTBuffers.Array.prototype.getDataList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.Variable, 3));
};


/** @param {!Array.<!proto.BERTBuffers.Variable>} value */
proto.BERTBuffers.Array.prototype.setDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BERTBuffers.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.Variable}
 */
proto.BERTBuffers.Array.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BERTBuffers.Variable, opt_index);
};


proto.BERTBuffers.Array.prototype.clearDataList = function() {
  this.setDataList([]);
};


/**
 * repeated string rownames = 4;
 * @return {!Array.<string>}
 */
proto.BERTBuffers.Array.prototype.getRownamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.BERTBuffers.Array.prototype.setRownamesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.BERTBuffers.Array.prototype.addRownames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.BERTBuffers.Array.prototype.clearRownamesList = function() {
  this.setRownamesList([]);
};


/**
 * repeated string colnames = 5;
 * @return {!Array.<string>}
 */
proto.BERTBuffers.Array.prototype.getColnamesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.BERTBuffers.Array.prototype.setColnamesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.BERTBuffers.Array.prototype.addColnames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.BERTBuffers.Array.prototype.clearColnamesList = function() {
  this.setColnamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BERTBuffers.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.Error.displayName = 'proto.BERTBuffers.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.Error}
 */
proto.BERTBuffers.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.Error;
  return proto.BERTBuffers.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.Error}
 */
proto.BERTBuffers.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.BERTBuffers.ErrorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ErrorType type = 1;
 * @return {!proto.BERTBuffers.ErrorType}
 */
proto.BERTBuffers.Error.prototype.getType = function() {
  return /** @type {!proto.BERTBuffers.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.BERTBuffers.ErrorType} value */
proto.BERTBuffers.Error.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.BERTBuffers.Error.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BERTBuffers.Error.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.SheetReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BERTBuffers.SheetReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.SheetReference.displayName = 'proto.BERTBuffers.SheetReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.SheetReference.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.SheetReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.SheetReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.SheetReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    startRow: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startColumn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endRow: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endColumn: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sheetId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.SheetReference}
 */
proto.BERTBuffers.SheetReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.SheetReference;
  return proto.BERTBuffers.SheetReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.SheetReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.SheetReference}
 */
proto.BERTBuffers.SheetReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartRow(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartColumn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndRow(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndColumn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSheetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.SheetReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.SheetReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.SheetReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.SheetReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartRow();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStartColumn();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndRow();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEndColumn();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSheetId();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint32 start_row = 1;
 * @return {number}
 */
proto.BERTBuffers.SheetReference.prototype.getStartRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BERTBuffers.SheetReference.prototype.setStartRow = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 start_column = 2;
 * @return {number}
 */
proto.BERTBuffers.SheetReference.prototype.getStartColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BERTBuffers.SheetReference.prototype.setStartColumn = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 end_row = 3;
 * @return {number}
 */
proto.BERTBuffers.SheetReference.prototype.getEndRow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BERTBuffers.SheetReference.prototype.setEndRow = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 end_column = 4;
 * @return {number}
 */
proto.BERTBuffers.SheetReference.prototype.getEndColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BERTBuffers.SheetReference.prototype.setEndColumn = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 sheet_id = 5;
 * @return {number}
 */
proto.BERTBuffers.SheetReference.prototype.getSheetId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BERTBuffers.SheetReference.prototype.setSheetId = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BERTBuffers.Variable.oneofGroups_);
};
goog.inherits(proto.BERTBuffers.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.Variable.displayName = 'proto.BERTBuffers.Variable';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BERTBuffers.Variable.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.BERTBuffers.Variable.ValueCase = {
  VALUE_NOT_SET: 0,
  NIL: 1,
  MISSING: 2,
  ERR: 3,
  NUM: 4,
  STR: 5,
  BOOLEAN: 6,
  CPX: 7,
  ARR: 8,
  REF: 9,
  COM_POINTER: 10,
  U64: 11
};

/**
 * @return {proto.BERTBuffers.Variable.ValueCase}
 */
proto.BERTBuffers.Variable.prototype.getValueCase = function() {
  return /** @type {proto.BERTBuffers.Variable.ValueCase} */(jspb.Message.computeOneofCase(this, proto.BERTBuffers.Variable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    nil: jspb.Message.getFieldWithDefault(msg, 1, false),
    missing: jspb.Message.getFieldWithDefault(msg, 2, false),
    err: (f = msg.getErr()) && proto.BERTBuffers.Error.toObject(includeInstance, f),
    num: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    str: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_boolean: jspb.Message.getFieldWithDefault(msg, 6, false),
    cpx: (f = msg.getCpx()) && proto.BERTBuffers.Complex.toObject(includeInstance, f),
    arr: (f = msg.getArr()) && proto.BERTBuffers.Array.toObject(includeInstance, f),
    ref: (f = msg.getRef()) && proto.BERTBuffers.SheetReference.toObject(includeInstance, f),
    comPointer: (f = msg.getComPointer()) && proto.BERTBuffers.ExternalPointer.toObject(includeInstance, f),
    u64: jspb.Message.getFieldWithDefault(msg, 11, 0),
    name: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.Variable}
 */
proto.BERTBuffers.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.Variable;
  return proto.BERTBuffers.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.Variable}
 */
proto.BERTBuffers.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNil(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMissing(value);
      break;
    case 3:
      var value = new proto.BERTBuffers.Error;
      reader.readMessage(value,proto.BERTBuffers.Error.deserializeBinaryFromReader);
      msg.setErr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNum(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStr(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolean(value);
      break;
    case 7:
      var value = new proto.BERTBuffers.Complex;
      reader.readMessage(value,proto.BERTBuffers.Complex.deserializeBinaryFromReader);
      msg.setCpx(value);
      break;
    case 8:
      var value = new proto.BERTBuffers.Array;
      reader.readMessage(value,proto.BERTBuffers.Array.deserializeBinaryFromReader);
      msg.setArr(value);
      break;
    case 9:
      var value = new proto.BERTBuffers.SheetReference;
      reader.readMessage(value,proto.BERTBuffers.SheetReference.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 10:
      var value = new proto.BERTBuffers.ExternalPointer;
      reader.readMessage(value,proto.BERTBuffers.ExternalPointer.deserializeBinaryFromReader);
      msg.setComPointer(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getErr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BERTBuffers.Error.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getCpx();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.BERTBuffers.Complex.serializeBinaryToWriter
    );
  }
  f = message.getArr();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.BERTBuffers.Array.serializeBinaryToWriter
    );
  }
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.BERTBuffers.SheetReference.serializeBinaryToWriter
    );
  }
  f = message.getComPointer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.BERTBuffers.ExternalPointer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional bool nil = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BERTBuffers.Variable.prototype.getNil = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.BERTBuffers.Variable.prototype.setNil = function(value) {
  jspb.Message.setOneofField(this, 1, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearNil = function() {
  jspb.Message.setOneofField(this, 1, proto.BERTBuffers.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasNil = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool missing = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BERTBuffers.Variable.prototype.getMissing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.BERTBuffers.Variable.prototype.setMissing = function(value) {
  jspb.Message.setOneofField(this, 2, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearMissing = function() {
  jspb.Message.setOneofField(this, 2, proto.BERTBuffers.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasMissing = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error err = 3;
 * @return {?proto.BERTBuffers.Error}
 */
proto.BERTBuffers.Variable.prototype.getErr = function() {
  return /** @type{?proto.BERTBuffers.Error} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Error, 3));
};


/** @param {?proto.BERTBuffers.Error|undefined} value */
proto.BERTBuffers.Variable.prototype.setErr = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearErr = function() {
  this.setErr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasErr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double num = 4;
 * @return {number}
 */
proto.BERTBuffers.Variable.prototype.getNum = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.BERTBuffers.Variable.prototype.setNum = function(value) {
  jspb.Message.setOneofField(this, 4, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearNum = function() {
  jspb.Message.setOneofField(this, 4, proto.BERTBuffers.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasNum = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string str = 5;
 * @return {string}
 */
proto.BERTBuffers.Variable.prototype.getStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.BERTBuffers.Variable.prototype.setStr = function(value) {
  jspb.Message.setOneofField(this, 5, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearStr = function() {
  jspb.Message.setOneofField(this, 5, proto.BERTBuffers.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasStr = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool boolean = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BERTBuffers.Variable.prototype.getBoolean = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.BERTBuffers.Variable.prototype.setBoolean = function(value) {
  jspb.Message.setOneofField(this, 6, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearBoolean = function() {
  jspb.Message.setOneofField(this, 6, proto.BERTBuffers.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasBoolean = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Complex cpx = 7;
 * @return {?proto.BERTBuffers.Complex}
 */
proto.BERTBuffers.Variable.prototype.getCpx = function() {
  return /** @type{?proto.BERTBuffers.Complex} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Complex, 7));
};


/** @param {?proto.BERTBuffers.Complex|undefined} value */
proto.BERTBuffers.Variable.prototype.setCpx = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearCpx = function() {
  this.setCpx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasCpx = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Array arr = 8;
 * @return {?proto.BERTBuffers.Array}
 */
proto.BERTBuffers.Variable.prototype.getArr = function() {
  return /** @type{?proto.BERTBuffers.Array} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Array, 8));
};


/** @param {?proto.BERTBuffers.Array|undefined} value */
proto.BERTBuffers.Variable.prototype.setArr = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearArr = function() {
  this.setArr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasArr = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional SheetReference ref = 9;
 * @return {?proto.BERTBuffers.SheetReference}
 */
proto.BERTBuffers.Variable.prototype.getRef = function() {
  return /** @type{?proto.BERTBuffers.SheetReference} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.SheetReference, 9));
};


/** @param {?proto.BERTBuffers.SheetReference|undefined} value */
proto.BERTBuffers.Variable.prototype.setRef = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasRef = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ExternalPointer com_pointer = 10;
 * @return {?proto.BERTBuffers.ExternalPointer}
 */
proto.BERTBuffers.Variable.prototype.getComPointer = function() {
  return /** @type{?proto.BERTBuffers.ExternalPointer} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.ExternalPointer, 10));
};


/** @param {?proto.BERTBuffers.ExternalPointer|undefined} value */
proto.BERTBuffers.Variable.prototype.setComPointer = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearComPointer = function() {
  this.setComPointer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasComPointer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 u64 = 11;
 * @return {number}
 */
proto.BERTBuffers.Variable.prototype.getU64 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.BERTBuffers.Variable.prototype.setU64 = function(value) {
  jspb.Message.setOneofField(this, 11, proto.BERTBuffers.Variable.oneofGroups_[0], value);
};


proto.BERTBuffers.Variable.prototype.clearU64 = function() {
  jspb.Message.setOneofField(this, 11, proto.BERTBuffers.Variable.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Variable.prototype.hasU64 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string name = 15;
 * @return {string}
 */
proto.BERTBuffers.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.BERTBuffers.Variable.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.Code = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.Code.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.Code, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.Code.displayName = 'proto.BERTBuffers.Code';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.Code.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.Code.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.Code.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.Code} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Code.toObject = function(includeInstance, msg) {
  var f, obj = {
    lineList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.Code}
 */
proto.BERTBuffers.Code.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.Code;
  return proto.BERTBuffers.Code.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.Code} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.Code}
 */
proto.BERTBuffers.Code.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.Code.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.Code.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.Code} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Code.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string line = 1;
 * @return {!Array.<string>}
 */
proto.BERTBuffers.Code.prototype.getLineList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.BERTBuffers.Code.prototype.setLineList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.BERTBuffers.Code.prototype.addLine = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BERTBuffers.Code.prototype.clearLineList = function() {
  this.setLineList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.CompositeFunctionCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.CompositeFunctionCall.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.CompositeFunctionCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.CompositeFunctionCall.displayName = 'proto.BERTBuffers.CompositeFunctionCall';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.CompositeFunctionCall.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.CompositeFunctionCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.CompositeFunctionCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.CompositeFunctionCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.BERTBuffers.Variable.toObject, includeInstance),
    pointer: jspb.Message.getFieldWithDefault(msg, 3, 0),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    target: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.CompositeFunctionCall}
 */
proto.BERTBuffers.CompositeFunctionCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.CompositeFunctionCall;
  return proto.BERTBuffers.CompositeFunctionCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.CompositeFunctionCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.CompositeFunctionCall}
 */
proto.BERTBuffers.CompositeFunctionCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunction(value);
      break;
    case 2:
      var value = new proto.BERTBuffers.Variable;
      reader.readMessage(value,proto.BERTBuffers.Variable.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPointer(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 5:
      var value = /** @type {!proto.BERTBuffers.CallType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {!proto.BERTBuffers.CallTarget} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.CompositeFunctionCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.CompositeFunctionCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.CompositeFunctionCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BERTBuffers.Variable.serializeBinaryToWriter
    );
  }
  f = message.getPointer();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string function = 1;
 * @return {string}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.getFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BERTBuffers.CompositeFunctionCall.prototype.setFunction = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Variable arguments = 2;
 * @return {!Array.<!proto.BERTBuffers.Variable>}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.getArgumentsList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.Variable, 2));
};


/** @param {!Array.<!proto.BERTBuffers.Variable>} value */
proto.BERTBuffers.CompositeFunctionCall.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BERTBuffers.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.Variable}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BERTBuffers.Variable, opt_index);
};


proto.BERTBuffers.CompositeFunctionCall.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};


/**
 * optional uint64 pointer = 3;
 * @return {number}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.getPointer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BERTBuffers.CompositeFunctionCall.prototype.setPointer = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 index = 4;
 * @return {number}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.BERTBuffers.CompositeFunctionCall.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CallType type = 5;
 * @return {!proto.BERTBuffers.CallType}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.getType = function() {
  return /** @type {!proto.BERTBuffers.CallType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.BERTBuffers.CallType} value */
proto.BERTBuffers.CompositeFunctionCall.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional CallTarget target = 6;
 * @return {!proto.BERTBuffers.CallTarget}
 */
proto.BERTBuffers.CompositeFunctionCall.prototype.getTarget = function() {
  return /** @type {!proto.BERTBuffers.CallTarget} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.BERTBuffers.CallTarget} value */
proto.BERTBuffers.CompositeFunctionCall.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.Console = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BERTBuffers.Console.oneofGroups_);
};
goog.inherits(proto.BERTBuffers.Console, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.Console.displayName = 'proto.BERTBuffers.Console';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BERTBuffers.Console.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.BERTBuffers.Console.MessageCase = {
  MESSAGE_NOT_SET: 0,
  TEXT: 1,
  ERR: 2,
  PROMPT: 3
};

/**
 * @return {proto.BERTBuffers.Console.MessageCase}
 */
proto.BERTBuffers.Console.prototype.getMessageCase = function() {
  return /** @type {proto.BERTBuffers.Console.MessageCase} */(jspb.Message.computeOneofCase(this, proto.BERTBuffers.Console.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.Console.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.Console.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.Console} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Console.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    err: jspb.Message.getFieldWithDefault(msg, 2, ""),
    prompt: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.Console}
 */
proto.BERTBuffers.Console.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.Console;
  return proto.BERTBuffers.Console.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.Console} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.Console}
 */
proto.BERTBuffers.Console.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrompt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.Console.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.Console.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.Console} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.Console.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.BERTBuffers.Console.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BERTBuffers.Console.prototype.setText = function(value) {
  jspb.Message.setOneofField(this, 1, proto.BERTBuffers.Console.oneofGroups_[0], value);
};


proto.BERTBuffers.Console.prototype.clearText = function() {
  jspb.Message.setOneofField(this, 1, proto.BERTBuffers.Console.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Console.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string err = 2;
 * @return {string}
 */
proto.BERTBuffers.Console.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BERTBuffers.Console.prototype.setErr = function(value) {
  jspb.Message.setOneofField(this, 2, proto.BERTBuffers.Console.oneofGroups_[0], value);
};


proto.BERTBuffers.Console.prototype.clearErr = function() {
  jspb.Message.setOneofField(this, 2, proto.BERTBuffers.Console.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Console.prototype.hasErr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string prompt = 3;
 * @return {string}
 */
proto.BERTBuffers.Console.prototype.getPrompt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BERTBuffers.Console.prototype.setPrompt = function(value) {
  jspb.Message.setOneofField(this, 3, proto.BERTBuffers.Console.oneofGroups_[0], value);
};


proto.BERTBuffers.Console.prototype.clearPrompt = function() {
  jspb.Message.setOneofField(this, 3, proto.BERTBuffers.Console.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.Console.prototype.hasPrompt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.FunctionElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BERTBuffers.FunctionElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.FunctionElement.displayName = 'proto.BERTBuffers.FunctionElement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.FunctionElement.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.FunctionElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.FunctionElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.FunctionElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typeName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    defaultValue: (f = msg.getDefaultValue()) && proto.BERTBuffers.Variable.toObject(includeInstance, f),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    index: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.FunctionElement}
 */
proto.BERTBuffers.FunctionElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.FunctionElement;
  return proto.BERTBuffers.FunctionElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.FunctionElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.FunctionElement}
 */
proto.BERTBuffers.FunctionElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeName(value);
      break;
    case 3:
      var value = new proto.BERTBuffers.Variable;
      reader.readMessage(value,proto.BERTBuffers.Variable.deserializeBinaryFromReader);
      msg.setDefaultValue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.FunctionElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.FunctionElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.FunctionElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.FunctionElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypeName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDefaultValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BERTBuffers.Variable.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.BERTBuffers.FunctionElement.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BERTBuffers.FunctionElement.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type_name = 2;
 * @return {string}
 */
proto.BERTBuffers.FunctionElement.prototype.getTypeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.BERTBuffers.FunctionElement.prototype.setTypeName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Variable default_value = 3;
 * @return {?proto.BERTBuffers.Variable}
 */
proto.BERTBuffers.FunctionElement.prototype.getDefaultValue = function() {
  return /** @type{?proto.BERTBuffers.Variable} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Variable, 3));
};


/** @param {?proto.BERTBuffers.Variable|undefined} value */
proto.BERTBuffers.FunctionElement.prototype.setDefaultValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.BERTBuffers.FunctionElement.prototype.clearDefaultValue = function() {
  this.setDefaultValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.FunctionElement.prototype.hasDefaultValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.BERTBuffers.FunctionElement.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BERTBuffers.FunctionElement.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 index = 5;
 * @return {number}
 */
proto.BERTBuffers.FunctionElement.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BERTBuffers.FunctionElement.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.FunctionDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.FunctionDescriptor.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.FunctionDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.FunctionDescriptor.displayName = 'proto.BERTBuffers.FunctionDescriptor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.FunctionDescriptor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.FunctionDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.FunctionDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.FunctionDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: (f = msg.getFunction()) && proto.BERTBuffers.FunctionElement.toObject(includeInstance, f),
    callType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.BERTBuffers.FunctionElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.FunctionDescriptor}
 */
proto.BERTBuffers.FunctionDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.FunctionDescriptor;
  return proto.BERTBuffers.FunctionDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.FunctionDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.FunctionDescriptor}
 */
proto.BERTBuffers.FunctionDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BERTBuffers.FunctionElement;
      reader.readMessage(value,proto.BERTBuffers.FunctionElement.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 2:
      var value = /** @type {!proto.BERTBuffers.CallType} */ (reader.readEnum());
      msg.setCallType(value);
      break;
    case 3:
      var value = new proto.BERTBuffers.FunctionElement;
      reader.readMessage(value,proto.BERTBuffers.FunctionElement.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.FunctionDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.FunctionDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.FunctionDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.BERTBuffers.FunctionElement.serializeBinaryToWriter
    );
  }
  f = message.getCallType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BERTBuffers.FunctionElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional FunctionElement function = 1;
 * @return {?proto.BERTBuffers.FunctionElement}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.getFunction = function() {
  return /** @type{?proto.BERTBuffers.FunctionElement} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.FunctionElement, 1));
};


/** @param {?proto.BERTBuffers.FunctionElement|undefined} value */
proto.BERTBuffers.FunctionDescriptor.prototype.setFunction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.BERTBuffers.FunctionDescriptor.prototype.clearFunction = function() {
  this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CallType call_type = 2;
 * @return {!proto.BERTBuffers.CallType}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.getCallType = function() {
  return /** @type {!proto.BERTBuffers.CallType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.BERTBuffers.CallType} value */
proto.BERTBuffers.FunctionDescriptor.prototype.setCallType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated FunctionElement arguments = 3;
 * @return {!Array.<!proto.BERTBuffers.FunctionElement>}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.getArgumentsList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.FunctionElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.FunctionElement, 3));
};


/** @param {!Array.<!proto.BERTBuffers.FunctionElement>} value */
proto.BERTBuffers.FunctionDescriptor.prototype.setArgumentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BERTBuffers.FunctionElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.FunctionElement}
 */
proto.BERTBuffers.FunctionDescriptor.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BERTBuffers.FunctionElement, opt_index);
};


proto.BERTBuffers.FunctionDescriptor.prototype.clearArgumentsList = function() {
  this.setArgumentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.FunctionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.FunctionList.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.FunctionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.FunctionList.displayName = 'proto.BERTBuffers.FunctionList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.FunctionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.FunctionList.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.FunctionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.FunctionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.FunctionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionsList: jspb.Message.toObjectList(msg.getFunctionsList(),
    proto.BERTBuffers.FunctionDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.FunctionList}
 */
proto.BERTBuffers.FunctionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.FunctionList;
  return proto.BERTBuffers.FunctionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.FunctionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.FunctionList}
 */
proto.BERTBuffers.FunctionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BERTBuffers.FunctionDescriptor;
      reader.readMessage(value,proto.BERTBuffers.FunctionDescriptor.deserializeBinaryFromReader);
      msg.addFunctions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.FunctionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.FunctionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.FunctionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.FunctionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BERTBuffers.FunctionDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FunctionDescriptor functions = 1;
 * @return {!Array.<!proto.BERTBuffers.FunctionDescriptor>}
 */
proto.BERTBuffers.FunctionList.prototype.getFunctionsList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.FunctionDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.FunctionDescriptor, 1));
};


/** @param {!Array.<!proto.BERTBuffers.FunctionDescriptor>} value */
proto.BERTBuffers.FunctionList.prototype.setFunctionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BERTBuffers.FunctionDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.FunctionDescriptor}
 */
proto.BERTBuffers.FunctionList.prototype.addFunctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BERTBuffers.FunctionDescriptor, opt_index);
};


proto.BERTBuffers.FunctionList.prototype.clearFunctionsList = function() {
  this.setFunctionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.EnumValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BERTBuffers.EnumValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.EnumValue.displayName = 'proto.BERTBuffers.EnumValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.EnumValue.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.EnumValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.EnumValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.EnumValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.EnumValue}
 */
proto.BERTBuffers.EnumValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.EnumValue;
  return proto.BERTBuffers.EnumValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.EnumValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.EnumValue}
 */
proto.BERTBuffers.EnumValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.EnumValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.EnumValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.EnumValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.EnumValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.BERTBuffers.EnumValue.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BERTBuffers.EnumValue.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 value = 2;
 * @return {number}
 */
proto.BERTBuffers.EnumValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BERTBuffers.EnumValue.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.EnumType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.EnumType.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.EnumType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.EnumType.displayName = 'proto.BERTBuffers.EnumType';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.EnumType.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.EnumType.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.EnumType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.EnumType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.EnumType.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.BERTBuffers.EnumValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.EnumType}
 */
proto.BERTBuffers.EnumType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.EnumType;
  return proto.BERTBuffers.EnumType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.EnumType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.EnumType}
 */
proto.BERTBuffers.EnumType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.BERTBuffers.EnumValue;
      reader.readMessage(value,proto.BERTBuffers.EnumValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.EnumType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.EnumType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.EnumType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.EnumType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BERTBuffers.EnumValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.BERTBuffers.EnumType.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BERTBuffers.EnumType.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated EnumValue values = 2;
 * @return {!Array.<!proto.BERTBuffers.EnumValue>}
 */
proto.BERTBuffers.EnumType.prototype.getValuesList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.EnumValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.EnumValue, 2));
};


/** @param {!Array.<!proto.BERTBuffers.EnumValue>} value */
proto.BERTBuffers.EnumType.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BERTBuffers.EnumValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.EnumValue}
 */
proto.BERTBuffers.EnumType.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BERTBuffers.EnumValue, opt_index);
};


proto.BERTBuffers.EnumType.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.ExternalPointer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BERTBuffers.ExternalPointer.repeatedFields_, null);
};
goog.inherits(proto.BERTBuffers.ExternalPointer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.ExternalPointer.displayName = 'proto.BERTBuffers.ExternalPointer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BERTBuffers.ExternalPointer.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.ExternalPointer.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.ExternalPointer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.ExternalPointer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.ExternalPointer.toObject = function(includeInstance, msg) {
  var f, obj = {
    interfaceName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pointer: jspb.Message.getFieldWithDefault(msg, 2, 0),
    functionsList: jspb.Message.toObjectList(msg.getFunctionsList(),
    proto.BERTBuffers.FunctionDescriptor.toObject, includeInstance),
    enumsList: jspb.Message.toObjectList(msg.getEnumsList(),
    proto.BERTBuffers.EnumType.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.ExternalPointer}
 */
proto.BERTBuffers.ExternalPointer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.ExternalPointer;
  return proto.BERTBuffers.ExternalPointer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.ExternalPointer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.ExternalPointer}
 */
proto.BERTBuffers.ExternalPointer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInterfaceName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPointer(value);
      break;
    case 3:
      var value = new proto.BERTBuffers.FunctionDescriptor;
      reader.readMessage(value,proto.BERTBuffers.FunctionDescriptor.deserializeBinaryFromReader);
      msg.addFunctions(value);
      break;
    case 4:
      var value = new proto.BERTBuffers.EnumType;
      reader.readMessage(value,proto.BERTBuffers.EnumType.deserializeBinaryFromReader);
      msg.addEnums(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.ExternalPointer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.ExternalPointer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.ExternalPointer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.ExternalPointer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterfaceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPointer();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFunctionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BERTBuffers.FunctionDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getEnumsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.BERTBuffers.EnumType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string interface_name = 1;
 * @return {string}
 */
proto.BERTBuffers.ExternalPointer.prototype.getInterfaceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.BERTBuffers.ExternalPointer.prototype.setInterfaceName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 pointer = 2;
 * @return {number}
 */
proto.BERTBuffers.ExternalPointer.prototype.getPointer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BERTBuffers.ExternalPointer.prototype.setPointer = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FunctionDescriptor functions = 3;
 * @return {!Array.<!proto.BERTBuffers.FunctionDescriptor>}
 */
proto.BERTBuffers.ExternalPointer.prototype.getFunctionsList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.FunctionDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.FunctionDescriptor, 3));
};


/** @param {!Array.<!proto.BERTBuffers.FunctionDescriptor>} value */
proto.BERTBuffers.ExternalPointer.prototype.setFunctionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BERTBuffers.FunctionDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.FunctionDescriptor}
 */
proto.BERTBuffers.ExternalPointer.prototype.addFunctions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BERTBuffers.FunctionDescriptor, opt_index);
};


proto.BERTBuffers.ExternalPointer.prototype.clearFunctionsList = function() {
  this.setFunctionsList([]);
};


/**
 * repeated EnumType enums = 4;
 * @return {!Array.<!proto.BERTBuffers.EnumType>}
 */
proto.BERTBuffers.ExternalPointer.prototype.getEnumsList = function() {
  return /** @type{!Array.<!proto.BERTBuffers.EnumType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BERTBuffers.EnumType, 4));
};


/** @param {!Array.<!proto.BERTBuffers.EnumType>} value */
proto.BERTBuffers.ExternalPointer.prototype.setEnumsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.BERTBuffers.EnumType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BERTBuffers.EnumType}
 */
proto.BERTBuffers.ExternalPointer.prototype.addEnums = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.BERTBuffers.EnumType, opt_index);
};


proto.BERTBuffers.ExternalPointer.prototype.clearEnumsList = function() {
  this.setEnumsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BERTBuffers.CallResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BERTBuffers.CallResponse.oneofGroups_);
};
goog.inherits(proto.BERTBuffers.CallResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BERTBuffers.CallResponse.displayName = 'proto.BERTBuffers.CallResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BERTBuffers.CallResponse.oneofGroups_ = [[3,4,5,6,7,8,9]];

/**
 * @enum {number}
 */
proto.BERTBuffers.CallResponse.OperationCase = {
  OPERATION_NOT_SET: 0,
  ERR: 3,
  RESULT: 4,
  CONSOLE: 5,
  CODE: 6,
  SHELL_COMMAND: 7,
  FUNCTION_CALL: 8,
  FUNCTION_LIST: 9
};

/**
 * @return {proto.BERTBuffers.CallResponse.OperationCase}
 */
proto.BERTBuffers.CallResponse.prototype.getOperationCase = function() {
  return /** @type {proto.BERTBuffers.CallResponse.OperationCase} */(jspb.Message.computeOneofCase(this, proto.BERTBuffers.CallResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BERTBuffers.CallResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BERTBuffers.CallResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BERTBuffers.CallResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.CallResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    wait: jspb.Message.getFieldWithDefault(msg, 2, false),
    err: jspb.Message.getFieldWithDefault(msg, 3, ""),
    result: (f = msg.getResult()) && proto.BERTBuffers.Variable.toObject(includeInstance, f),
    console: (f = msg.getConsole()) && proto.BERTBuffers.Console.toObject(includeInstance, f),
    code: (f = msg.getCode()) && proto.BERTBuffers.Code.toObject(includeInstance, f),
    shellCommand: jspb.Message.getFieldWithDefault(msg, 7, ""),
    functionCall: (f = msg.getFunctionCall()) && proto.BERTBuffers.CompositeFunctionCall.toObject(includeInstance, f),
    functionList: (f = msg.getFunctionList()) && proto.BERTBuffers.FunctionList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BERTBuffers.CallResponse}
 */
proto.BERTBuffers.CallResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BERTBuffers.CallResponse;
  return proto.BERTBuffers.CallResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BERTBuffers.CallResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BERTBuffers.CallResponse}
 */
proto.BERTBuffers.CallResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWait(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 4:
      var value = new proto.BERTBuffers.Variable;
      reader.readMessage(value,proto.BERTBuffers.Variable.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 5:
      var value = new proto.BERTBuffers.Console;
      reader.readMessage(value,proto.BERTBuffers.Console.deserializeBinaryFromReader);
      msg.setConsole(value);
      break;
    case 6:
      var value = new proto.BERTBuffers.Code;
      reader.readMessage(value,proto.BERTBuffers.Code.deserializeBinaryFromReader);
      msg.setCode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setShellCommand(value);
      break;
    case 8:
      var value = new proto.BERTBuffers.CompositeFunctionCall;
      reader.readMessage(value,proto.BERTBuffers.CompositeFunctionCall.deserializeBinaryFromReader);
      msg.setFunctionCall(value);
      break;
    case 9:
      var value = new proto.BERTBuffers.FunctionList;
      reader.readMessage(value,proto.BERTBuffers.FunctionList.deserializeBinaryFromReader);
      msg.setFunctionList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BERTBuffers.CallResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BERTBuffers.CallResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BERTBuffers.CallResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BERTBuffers.CallResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWait();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.BERTBuffers.Variable.serializeBinaryToWriter
    );
  }
  f = message.getConsole();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.BERTBuffers.Console.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.BERTBuffers.Code.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFunctionCall();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.BERTBuffers.CompositeFunctionCall.serializeBinaryToWriter
    );
  }
  f = message.getFunctionList();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.BERTBuffers.FunctionList.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.BERTBuffers.CallResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BERTBuffers.CallResponse.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool wait = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BERTBuffers.CallResponse.prototype.getWait = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.BERTBuffers.CallResponse.prototype.setWait = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string err = 3;
 * @return {string}
 */
proto.BERTBuffers.CallResponse.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.BERTBuffers.CallResponse.prototype.setErr = function(value) {
  jspb.Message.setOneofField(this, 3, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearErr = function() {
  jspb.Message.setOneofField(this, 3, proto.BERTBuffers.CallResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasErr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Variable result = 4;
 * @return {?proto.BERTBuffers.Variable}
 */
proto.BERTBuffers.CallResponse.prototype.getResult = function() {
  return /** @type{?proto.BERTBuffers.Variable} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Variable, 4));
};


/** @param {?proto.BERTBuffers.Variable|undefined} value */
proto.BERTBuffers.CallResponse.prototype.setResult = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Console console = 5;
 * @return {?proto.BERTBuffers.Console}
 */
proto.BERTBuffers.CallResponse.prototype.getConsole = function() {
  return /** @type{?proto.BERTBuffers.Console} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Console, 5));
};


/** @param {?proto.BERTBuffers.Console|undefined} value */
proto.BERTBuffers.CallResponse.prototype.setConsole = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearConsole = function() {
  this.setConsole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasConsole = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Code code = 6;
 * @return {?proto.BERTBuffers.Code}
 */
proto.BERTBuffers.CallResponse.prototype.getCode = function() {
  return /** @type{?proto.BERTBuffers.Code} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.Code, 6));
};


/** @param {?proto.BERTBuffers.Code|undefined} value */
proto.BERTBuffers.CallResponse.prototype.setCode = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearCode = function() {
  this.setCode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string shell_command = 7;
 * @return {string}
 */
proto.BERTBuffers.CallResponse.prototype.getShellCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.BERTBuffers.CallResponse.prototype.setShellCommand = function(value) {
  jspb.Message.setOneofField(this, 7, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearShellCommand = function() {
  jspb.Message.setOneofField(this, 7, proto.BERTBuffers.CallResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasShellCommand = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CompositeFunctionCall function_call = 8;
 * @return {?proto.BERTBuffers.CompositeFunctionCall}
 */
proto.BERTBuffers.CallResponse.prototype.getFunctionCall = function() {
  return /** @type{?proto.BERTBuffers.CompositeFunctionCall} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.CompositeFunctionCall, 8));
};


/** @param {?proto.BERTBuffers.CompositeFunctionCall|undefined} value */
proto.BERTBuffers.CallResponse.prototype.setFunctionCall = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearFunctionCall = function() {
  this.setFunctionCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasFunctionCall = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional FunctionList function_list = 9;
 * @return {?proto.BERTBuffers.FunctionList}
 */
proto.BERTBuffers.CallResponse.prototype.getFunctionList = function() {
  return /** @type{?proto.BERTBuffers.FunctionList} */ (
    jspb.Message.getWrapperField(this, proto.BERTBuffers.FunctionList, 9));
};


/** @param {?proto.BERTBuffers.FunctionList|undefined} value */
proto.BERTBuffers.CallResponse.prototype.setFunctionList = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.BERTBuffers.CallResponse.oneofGroups_[0], value);
};


proto.BERTBuffers.CallResponse.prototype.clearFunctionList = function() {
  this.setFunctionList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BERTBuffers.CallResponse.prototype.hasFunctionList = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * @enum {number}
 */
proto.BERTBuffers.ErrorType = {
  GENERIC: 0,
  NA: 1,
  INF: 2,
  PARSE: 3,
  EXECUTION: 4,
  OTHER: 15
};

/**
 * @enum {number}
 */
proto.BERTBuffers.CallType = {
  METHOD: 0,
  GET: 1,
  PUT: 2
};

/**
 * @enum {number}
 */
proto.BERTBuffers.CallTarget = {
  LANGUAGE: 0,
  COM: 1,
  SYSTEM: 2
};

goog.object.extend(exports, proto.BERTBuffers);
