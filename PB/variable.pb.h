// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: variable.proto

#ifndef PROTOBUF_variable_2eproto__INCLUDED
#define PROTOBUF_variable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_variable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsComplexImpl();
void InitDefaultsComplex();
void InitDefaultsArrayImpl();
void InitDefaultsArray();
void InitDefaultsErrorImpl();
void InitDefaultsError();
void InitDefaultsSheetReferenceImpl();
void InitDefaultsSheetReference();
void InitDefaultsCodeImpl();
void InitDefaultsCode();
void InitDefaultsFunctionCallImpl();
void InitDefaultsFunctionCall();
void InitDefaultsCOMFunctionCallImpl();
void InitDefaultsCOMFunctionCall();
void InitDefaultsCallImpl();
void InitDefaultsCall();
void InitDefaultsConsoleImpl();
void InitDefaultsConsole();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsComplex();
  InitDefaultsArray();
  InitDefaultsError();
  InitDefaultsSheetReference();
  InitDefaultsCode();
  InitDefaultsFunctionCall();
  InitDefaultsCOMFunctionCall();
  InitDefaultsCall();
  InitDefaultsConsole();
  InitDefaultsResponse();
}
}  // namespace protobuf_variable_2eproto
namespace BERTBuffers {
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class COMFunctionCall;
class COMFunctionCallDefaultTypeInternal;
extern COMFunctionCallDefaultTypeInternal _COMFunctionCall_default_instance_;
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class Code;
class CodeDefaultTypeInternal;
extern CodeDefaultTypeInternal _Code_default_instance_;
class Complex;
class ComplexDefaultTypeInternal;
extern ComplexDefaultTypeInternal _Complex_default_instance_;
class Console;
class ConsoleDefaultTypeInternal;
extern ConsoleDefaultTypeInternal _Console_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class FunctionCall;
class FunctionCallDefaultTypeInternal;
extern FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SheetReference;
class SheetReferenceDefaultTypeInternal;
extern SheetReferenceDefaultTypeInternal _SheetReference_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace BERTBuffers
namespace BERTBuffers {

enum Type {
  NIL = 0,
  STRING = 1,
  NUMBER = 2,
  BOOL = 3,
  COMPLEX = 4,
  ARRAY = 5,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_IsValid(int value);
const Type Type_MIN = NIL;
const Type Type_MAX = ARRAY;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum ErrorType {
  GENERIC = 0,
  NA = 1,
  INF = 2,
  PARSE = 3,
  EXECUTION = 4,
  ErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorType_IsValid(int value);
const ErrorType ErrorType_MIN = GENERIC;
const ErrorType ErrorType_MAX = EXECUTION;
const int ErrorType_ARRAYSIZE = ErrorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorType_descriptor();
inline const ::std::string& ErrorType_Name(ErrorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorType_descriptor(), value);
}
inline bool ErrorType_Parse(
    const ::std::string& name, ErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorType>(
    ErrorType_descriptor(), name, value);
}
enum CallType {
  undefined = 0,
  get = 1,
  put = 2,
  method = 3,
  CallType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CallType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CallType_IsValid(int value);
const CallType CallType_MIN = undefined;
const CallType CallType_MAX = method;
const int CallType_ARRAYSIZE = CallType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallType_descriptor();
inline const ::std::string& CallType_Name(CallType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallType_descriptor(), value);
}
inline bool CallType_Parse(
    const ::std::string& name, CallType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallType>(
    CallType_descriptor(), name, value);
}
// ===================================================================

class Complex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Complex) */ {
 public:
  Complex();
  virtual ~Complex();

  Complex(const Complex& from);

  inline Complex& operator=(const Complex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Complex(Complex&& from) noexcept
    : Complex() {
    *this = ::std::move(from);
  }

  inline Complex& operator=(Complex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Complex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Complex* internal_default_instance() {
    return reinterpret_cast<const Complex*>(
               &_Complex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Complex* other);
  friend void swap(Complex& a, Complex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Complex* New() const PROTOBUF_FINAL { return New(NULL); }

  Complex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Complex& from);
  void MergeFrom(const Complex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Complex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  double r() const;
  void set_r(double value);

  // double i = 2;
  void clear_i();
  static const int kIFieldNumber = 2;
  double i() const;
  void set_i(double value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Complex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double r_;
  double i_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsComplexImpl();
};
// -------------------------------------------------------------------

class Array : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Array) */ {
 public:
  Array();
  virtual ~Array();

  Array(const Array& from);

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(Array&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Array& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Array* other);
  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const PROTOBUF_FINAL { return New(NULL); }

  Array* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Array* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.Variable data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::BERTBuffers::Variable& data(int index) const;
  ::BERTBuffers::Variable* mutable_data(int index);
  ::BERTBuffers::Variable* add_data();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
      data() const;

  // repeated string rownames = 4;
  int rownames_size() const;
  void clear_rownames();
  static const int kRownamesFieldNumber = 4;
  const ::std::string& rownames(int index) const;
  ::std::string* mutable_rownames(int index);
  void set_rownames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rownames(int index, ::std::string&& value);
  #endif
  void set_rownames(int index, const char* value);
  void set_rownames(int index, const char* value, size_t size);
  ::std::string* add_rownames();
  void add_rownames(const ::std::string& value);
  #if LANG_CXX11
  void add_rownames(::std::string&& value);
  #endif
  void add_rownames(const char* value);
  void add_rownames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rownames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rownames();

  // repeated string colnames = 5;
  int colnames_size() const;
  void clear_colnames();
  static const int kColnamesFieldNumber = 5;
  const ::std::string& colnames(int index) const;
  ::std::string* mutable_colnames(int index);
  void set_colnames(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_colnames(int index, ::std::string&& value);
  #endif
  void set_colnames(int index, const char* value);
  void set_colnames(int index, const char* value, size_t size);
  ::std::string* add_colnames();
  void add_colnames(const ::std::string& value);
  #if LANG_CXX11
  void add_colnames(::std::string&& value);
  #endif
  void add_colnames(const char* value);
  void add_colnames(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& colnames() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_colnames();

  // int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Array)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable > data_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rownames_;
  ::google::protobuf::RepeatedPtrField< ::std::string> colnames_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Error* other);
  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const PROTOBUF_FINAL { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .BERTBuffers.ErrorType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::BERTBuffers::ErrorType type() const;
  void set_type(::BERTBuffers::ErrorType value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsErrorImpl();
};
// -------------------------------------------------------------------

class SheetReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.SheetReference) */ {
 public:
  SheetReference();
  virtual ~SheetReference();

  SheetReference(const SheetReference& from);

  inline SheetReference& operator=(const SheetReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SheetReference(SheetReference&& from) noexcept
    : SheetReference() {
    *this = ::std::move(from);
  }

  inline SheetReference& operator=(SheetReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SheetReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SheetReference* internal_default_instance() {
    return reinterpret_cast<const SheetReference*>(
               &_SheetReference_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SheetReference* other);
  friend void swap(SheetReference& a, SheetReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SheetReference* New() const PROTOBUF_FINAL { return New(NULL); }

  SheetReference* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SheetReference& from);
  void MergeFrom(const SheetReference& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SheetReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_row = 1;
  void clear_start_row();
  static const int kStartRowFieldNumber = 1;
  ::google::protobuf::uint32 start_row() const;
  void set_start_row(::google::protobuf::uint32 value);

  // uint32 start_column = 2;
  void clear_start_column();
  static const int kStartColumnFieldNumber = 2;
  ::google::protobuf::uint32 start_column() const;
  void set_start_column(::google::protobuf::uint32 value);

  // uint32 end_row = 3;
  void clear_end_row();
  static const int kEndRowFieldNumber = 3;
  ::google::protobuf::uint32 end_row() const;
  void set_end_row(::google::protobuf::uint32 value);

  // uint32 end_column = 4;
  void clear_end_column();
  static const int kEndColumnFieldNumber = 4;
  ::google::protobuf::uint32 end_column() const;
  void set_end_column(::google::protobuf::uint32 value);

  // uint64 sheet_id = 5;
  void clear_sheet_id();
  static const int kSheetIdFieldNumber = 5;
  ::google::protobuf::uint64 sheet_id() const;
  void set_sheet_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.SheetReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 start_row_;
  ::google::protobuf::uint32 start_column_;
  ::google::protobuf::uint32 end_row_;
  ::google::protobuf::uint32 end_column_;
  ::google::protobuf::uint64 sheet_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsSheetReferenceImpl();
};
// -------------------------------------------------------------------

class Variable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  enum ValueCase {
    kNil = 1,
    kMissing = 2,
    kErr = 3,
    kNum = 4,
    kStr = 5,
    kBoolean = 6,
    kCpx = 7,
    kArr = 8,
    kRef = 9,
    kExternalPointer = 10,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const PROTOBUF_FINAL { return New(NULL); }

  Variable* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 15;
  void clear_name();
  static const int kNameFieldNumber = 15;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool nil = 1;
  private:
  bool has_nil() const;
  public:
  void clear_nil();
  static const int kNilFieldNumber = 1;
  bool nil() const;
  void set_nil(bool value);

  // bool missing = 2;
  private:
  bool has_missing() const;
  public:
  void clear_missing();
  static const int kMissingFieldNumber = 2;
  bool missing() const;
  void set_missing(bool value);

  // .BERTBuffers.Error err = 3;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 3;
  const ::BERTBuffers::Error& err() const;
  ::BERTBuffers::Error* release_err();
  ::BERTBuffers::Error* mutable_err();
  void set_allocated_err(::BERTBuffers::Error* err);

  // double num = 4;
  private:
  bool has_num() const;
  public:
  void clear_num();
  static const int kNumFieldNumber = 4;
  double num() const;
  void set_num(double value);

  // string str = 5;
  private:
  bool has_str() const;
  public:
  void clear_str();
  static const int kStrFieldNumber = 5;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  #if LANG_CXX11
  void set_str(::std::string&& value);
  #endif
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // bool boolean = 6;
  private:
  bool has_boolean() const;
  public:
  void clear_boolean();
  static const int kBooleanFieldNumber = 6;
  bool boolean() const;
  void set_boolean(bool value);

  // .BERTBuffers.Complex cpx = 7;
  bool has_cpx() const;
  void clear_cpx();
  static const int kCpxFieldNumber = 7;
  const ::BERTBuffers::Complex& cpx() const;
  ::BERTBuffers::Complex* release_cpx();
  ::BERTBuffers::Complex* mutable_cpx();
  void set_allocated_cpx(::BERTBuffers::Complex* cpx);

  // .BERTBuffers.Array arr = 8;
  bool has_arr() const;
  void clear_arr();
  static const int kArrFieldNumber = 8;
  const ::BERTBuffers::Array& arr() const;
  ::BERTBuffers::Array* release_arr();
  ::BERTBuffers::Array* mutable_arr();
  void set_allocated_arr(::BERTBuffers::Array* arr);

  // .BERTBuffers.SheetReference ref = 9;
  bool has_ref() const;
  void clear_ref();
  static const int kRefFieldNumber = 9;
  const ::BERTBuffers::SheetReference& ref() const;
  ::BERTBuffers::SheetReference* release_ref();
  ::BERTBuffers::SheetReference* mutable_ref();
  void set_allocated_ref(::BERTBuffers::SheetReference* ref);

  // uint64 external_pointer = 10;
  private:
  bool has_external_pointer() const;
  public:
  void clear_external_pointer();
  static const int kExternalPointerFieldNumber = 10;
  ::google::protobuf::uint64 external_pointer() const;
  void set_external_pointer(::google::protobuf::uint64 value);

  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.Variable)
 private:
  void set_has_nil();
  void set_has_missing();
  void set_has_err();
  void set_has_num();
  void set_has_str();
  void set_has_boolean();
  void set_has_cpx();
  void set_has_arr();
  void set_has_ref();
  void set_has_external_pointer();

  inline bool has_value() const;
  void clear_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    bool nil_;
    bool missing_;
    ::BERTBuffers::Error* err_;
    double num_;
    ::google::protobuf::internal::ArenaStringPtr str_;
    bool boolean_;
    ::BERTBuffers::Complex* cpx_;
    ::BERTBuffers::Array* arr_;
    ::BERTBuffers::SheetReference* ref_;
    ::google::protobuf::uint64 external_pointer_;
  } value_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsArrayImpl();
};
// -------------------------------------------------------------------

class Code : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Code) */ {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Code(Code&& from) noexcept
    : Code() {
    *this = ::std::move(from);
  }

  inline Code& operator=(Code&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Code* internal_default_instance() {
    return reinterpret_cast<const Code*>(
               &_Code_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Code* other);
  friend void swap(Code& a, Code& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Code* New() const PROTOBUF_FINAL { return New(NULL); }

  Code* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Code* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string line = 1;
  int line_size() const;
  void clear_line();
  static const int kLineFieldNumber = 1;
  const ::std::string& line(int index) const;
  ::std::string* mutable_line(int index);
  void set_line(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_line(int index, ::std::string&& value);
  #endif
  void set_line(int index, const char* value);
  void set_line(int index, const char* value, size_t size);
  ::std::string* add_line();
  void add_line(const ::std::string& value);
  #if LANG_CXX11
  void add_line(::std::string&& value);
  #endif
  void add_line(const char* value);
  void add_line(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& line() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_line();

  // @@protoc_insertion_point(class_scope:BERTBuffers.Code)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> line_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsCodeImpl();
};
// -------------------------------------------------------------------

class FunctionCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.FunctionCall) */ {
 public:
  FunctionCall();
  virtual ~FunctionCall();

  FunctionCall(const FunctionCall& from);

  inline FunctionCall& operator=(const FunctionCall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FunctionCall(FunctionCall&& from) noexcept
    : FunctionCall() {
    *this = ::std::move(from);
  }

  inline FunctionCall& operator=(FunctionCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionCall* internal_default_instance() {
    return reinterpret_cast<const FunctionCall*>(
               &_FunctionCall_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FunctionCall* other);
  friend void swap(FunctionCall& a, FunctionCall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FunctionCall* New() const PROTOBUF_FINAL { return New(NULL); }

  FunctionCall* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FunctionCall& from);
  void MergeFrom(const FunctionCall& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FunctionCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.Variable arguments = 2;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 2;
  const ::BERTBuffers::Variable& arguments(int index) const;
  ::BERTBuffers::Variable* mutable_arguments(int index);
  ::BERTBuffers::Variable* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
      arguments() const;

  // string function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // @@protoc_insertion_point(class_scope:BERTBuffers.FunctionCall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable > arguments_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsFunctionCallImpl();
};
// -------------------------------------------------------------------

class COMFunctionCall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.COMFunctionCall) */ {
 public:
  COMFunctionCall();
  virtual ~COMFunctionCall();

  COMFunctionCall(const COMFunctionCall& from);

  inline COMFunctionCall& operator=(const COMFunctionCall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  COMFunctionCall(COMFunctionCall&& from) noexcept
    : COMFunctionCall() {
    *this = ::std::move(from);
  }

  inline COMFunctionCall& operator=(COMFunctionCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const COMFunctionCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COMFunctionCall* internal_default_instance() {
    return reinterpret_cast<const COMFunctionCall*>(
               &_COMFunctionCall_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(COMFunctionCall* other);
  friend void swap(COMFunctionCall& a, COMFunctionCall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline COMFunctionCall* New() const PROTOBUF_FINAL { return New(NULL); }

  COMFunctionCall* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const COMFunctionCall& from);
  void MergeFrom(const COMFunctionCall& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(COMFunctionCall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .BERTBuffers.Variable arguments = 5;
  int arguments_size() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 5;
  const ::BERTBuffers::Variable& arguments(int index) const;
  ::BERTBuffers::Variable* mutable_arguments(int index);
  ::BERTBuffers::Variable* add_arguments();
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
      mutable_arguments();
  const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
      arguments() const;

  // string function = 1;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  #if LANG_CXX11
  void set_function(::std::string&& value);
  #endif
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // uint32 pointer = 2;
  void clear_pointer();
  static const int kPointerFieldNumber = 2;
  ::google::protobuf::uint32 pointer() const;
  void set_pointer(::google::protobuf::uint32 value);

  // uint32 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // .BERTBuffers.CallType type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::BERTBuffers::CallType type() const;
  void set_type(::BERTBuffers::CallType value);

  // @@protoc_insertion_point(class_scope:BERTBuffers.COMFunctionCall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable > arguments_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::uint32 pointer_;
  ::google::protobuf::uint32 index_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsCOMFunctionCallImpl();
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  enum CallCase {
    kSystemCommand = 3,
    kFunctionCall = 4,
    kCode = 5,
    kShellCommand = 6,
    kCallback = 7,
    kComCallback = 8,
    CALL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const PROTOBUF_FINAL { return New(NULL); }

  Call* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool wait = 2;
  void clear_wait();
  static const int kWaitFieldNumber = 2;
  bool wait() const;
  void set_wait(bool value);

  // string system_command = 3;
  private:
  bool has_system_command() const;
  public:
  void clear_system_command();
  static const int kSystemCommandFieldNumber = 3;
  const ::std::string& system_command() const;
  void set_system_command(const ::std::string& value);
  #if LANG_CXX11
  void set_system_command(::std::string&& value);
  #endif
  void set_system_command(const char* value);
  void set_system_command(const char* value, size_t size);
  ::std::string* mutable_system_command();
  ::std::string* release_system_command();
  void set_allocated_system_command(::std::string* system_command);

  // .BERTBuffers.FunctionCall function_call = 4;
  bool has_function_call() const;
  void clear_function_call();
  static const int kFunctionCallFieldNumber = 4;
  const ::BERTBuffers::FunctionCall& function_call() const;
  ::BERTBuffers::FunctionCall* release_function_call();
  ::BERTBuffers::FunctionCall* mutable_function_call();
  void set_allocated_function_call(::BERTBuffers::FunctionCall* function_call);

  // .BERTBuffers.Code code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  const ::BERTBuffers::Code& code() const;
  ::BERTBuffers::Code* release_code();
  ::BERTBuffers::Code* mutable_code();
  void set_allocated_code(::BERTBuffers::Code* code);

  // string shell_command = 6;
  private:
  bool has_shell_command() const;
  public:
  void clear_shell_command();
  static const int kShellCommandFieldNumber = 6;
  const ::std::string& shell_command() const;
  void set_shell_command(const ::std::string& value);
  #if LANG_CXX11
  void set_shell_command(::std::string&& value);
  #endif
  void set_shell_command(const char* value);
  void set_shell_command(const char* value, size_t size);
  ::std::string* mutable_shell_command();
  ::std::string* release_shell_command();
  void set_allocated_shell_command(::std::string* shell_command);

  // .BERTBuffers.FunctionCall callback = 7;
  bool has_callback() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 7;
  const ::BERTBuffers::FunctionCall& callback() const;
  ::BERTBuffers::FunctionCall* release_callback();
  ::BERTBuffers::FunctionCall* mutable_callback();
  void set_allocated_callback(::BERTBuffers::FunctionCall* callback);

  // .BERTBuffers.COMFunctionCall com_callback = 8;
  bool has_com_callback() const;
  void clear_com_callback();
  static const int kComCallbackFieldNumber = 8;
  const ::BERTBuffers::COMFunctionCall& com_callback() const;
  ::BERTBuffers::COMFunctionCall* release_com_callback();
  ::BERTBuffers::COMFunctionCall* mutable_com_callback();
  void set_allocated_com_callback(::BERTBuffers::COMFunctionCall* com_callback);

  CallCase call_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.Call)
 private:
  void set_has_system_command();
  void set_has_function_call();
  void set_has_code();
  void set_has_shell_command();
  void set_has_callback();
  void set_has_com_callback();

  inline bool has_call() const;
  void clear_call();
  inline void clear_has_call();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  bool wait_;
  union CallUnion {
    CallUnion() {}
    ::google::protobuf::internal::ArenaStringPtr system_command_;
    ::BERTBuffers::FunctionCall* function_call_;
    ::BERTBuffers::Code* code_;
    ::google::protobuf::internal::ArenaStringPtr shell_command_;
    ::BERTBuffers::FunctionCall* callback_;
    ::BERTBuffers::COMFunctionCall* com_callback_;
  } call_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsCallImpl();
};
// -------------------------------------------------------------------

class Console : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Console) */ {
 public:
  Console();
  virtual ~Console();

  Console(const Console& from);

  inline Console& operator=(const Console& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Console(Console&& from) noexcept
    : Console() {
    *this = ::std::move(from);
  }

  inline Console& operator=(Console&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Console& default_instance();

  enum MessageCase {
    kText = 1,
    kErr = 2,
    kPrompt = 3,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Console* internal_default_instance() {
    return reinterpret_cast<const Console*>(
               &_Console_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Console* other);
  friend void swap(Console& a, Console& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Console* New() const PROTOBUF_FINAL { return New(NULL); }

  Console* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Console& from);
  void MergeFrom(const Console& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Console* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string text = 1;
  private:
  bool has_text() const;
  public:
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // string err = 2;
  private:
  bool has_err() const;
  public:
  void clear_err();
  static const int kErrFieldNumber = 2;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // string prompt = 3;
  private:
  bool has_prompt() const;
  public:
  void clear_prompt();
  static const int kPromptFieldNumber = 3;
  const ::std::string& prompt() const;
  void set_prompt(const ::std::string& value);
  #if LANG_CXX11
  void set_prompt(::std::string&& value);
  #endif
  void set_prompt(const char* value);
  void set_prompt(const char* value, size_t size);
  ::std::string* mutable_prompt();
  ::std::string* release_prompt();
  void set_allocated_prompt(::std::string* prompt);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.Console)
 private:
  void set_has_text();
  void set_has_err();
  void set_has_prompt();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr err_;
    ::google::protobuf::internal::ArenaStringPtr prompt_;
  } message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsConsoleImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BERTBuffers.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ResultCase {
    kErr = 2,
    kValue = 3,
    kConsole = 4,
    kControlMessage = 5,
    kCallback = 6,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // string err = 2;
  private:
  bool has_err() const;
  public:
  void clear_err();
  static const int kErrFieldNumber = 2;
  const ::std::string& err() const;
  void set_err(const ::std::string& value);
  #if LANG_CXX11
  void set_err(::std::string&& value);
  #endif
  void set_err(const char* value);
  void set_err(const char* value, size_t size);
  ::std::string* mutable_err();
  ::std::string* release_err();
  void set_allocated_err(::std::string* err);

  // .BERTBuffers.Variable value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::BERTBuffers::Variable& value() const;
  ::BERTBuffers::Variable* release_value();
  ::BERTBuffers::Variable* mutable_value();
  void set_allocated_value(::BERTBuffers::Variable* value);

  // .BERTBuffers.Console console = 4;
  bool has_console() const;
  void clear_console();
  static const int kConsoleFieldNumber = 4;
  const ::BERTBuffers::Console& console() const;
  ::BERTBuffers::Console* release_console();
  ::BERTBuffers::Console* mutable_console();
  void set_allocated_console(::BERTBuffers::Console* console);

  // string control_message = 5;
  private:
  bool has_control_message() const;
  public:
  void clear_control_message();
  static const int kControlMessageFieldNumber = 5;
  const ::std::string& control_message() const;
  void set_control_message(const ::std::string& value);
  #if LANG_CXX11
  void set_control_message(::std::string&& value);
  #endif
  void set_control_message(const char* value);
  void set_control_message(const char* value, size_t size);
  ::std::string* mutable_control_message();
  ::std::string* release_control_message();
  void set_allocated_control_message(::std::string* control_message);

  // .BERTBuffers.FunctionCall callback = 6;
  bool has_callback() const;
  void clear_callback();
  static const int kCallbackFieldNumber = 6;
  const ::BERTBuffers::FunctionCall& callback() const;
  ::BERTBuffers::FunctionCall* release_callback();
  ::BERTBuffers::FunctionCall* mutable_callback();
  void set_allocated_callback(::BERTBuffers::FunctionCall* callback);

  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:BERTBuffers.Response)
 private:
  void set_has_err();
  void set_has_value();
  void set_has_console();
  void set_has_control_message();
  void set_has_callback();

  inline bool has_result() const;
  void clear_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  union ResultUnion {
    ResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr err_;
    ::BERTBuffers::Variable* value_;
    ::BERTBuffers::Console* console_;
    ::google::protobuf::internal::ArenaStringPtr control_message_;
    ::BERTBuffers::FunctionCall* callback_;
  } result_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_variable_2eproto::TableStruct;
  friend void ::protobuf_variable_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Complex

// double r = 1;
inline void Complex::clear_r() {
  r_ = 0;
}
inline double Complex::r() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Complex.r)
  return r_;
}
inline void Complex::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Complex.r)
}

// double i = 2;
inline void Complex::clear_i() {
  i_ = 0;
}
inline double Complex::i() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Complex.i)
  return i_;
}
inline void Complex::set_i(double value) {
  
  i_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Complex.i)
}

// -------------------------------------------------------------------

// Array

// int32 rows = 1;
inline void Array::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 Array::rows() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.rows)
  return rows_;
}
inline void Array::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.rows)
}

// int32 cols = 2;
inline void Array::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 Array::cols() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.cols)
  return cols_;
}
inline void Array::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.cols)
}

// repeated .BERTBuffers.Variable data = 3;
inline int Array::data_size() const {
  return data_.size();
}
inline void Array::clear_data() {
  data_.Clear();
}
inline const ::BERTBuffers::Variable& Array::data(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.data)
  return data_.Get(index);
}
inline ::BERTBuffers::Variable* Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Array.data)
  return data_.Mutable(index);
}
inline ::BERTBuffers::Variable* Array::add_data() {
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Array.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
Array::data() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Array.data)
  return data_;
}

// repeated string rownames = 4;
inline int Array::rownames_size() const {
  return rownames_.size();
}
inline void Array::clear_rownames() {
  rownames_.Clear();
}
inline const ::std::string& Array::rownames(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.rownames)
  return rownames_.Get(index);
}
inline ::std::string* Array::mutable_rownames(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Array.rownames)
  return rownames_.Mutable(index);
}
inline void Array::set_rownames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.rownames)
  rownames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Array::set_rownames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.rownames)
  rownames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Array::set_rownames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rownames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Array.rownames)
}
inline void Array::set_rownames(int index, const char* value, size_t size) {
  rownames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Array.rownames)
}
inline ::std::string* Array::add_rownames() {
  // @@protoc_insertion_point(field_add_mutable:BERTBuffers.Array.rownames)
  return rownames_.Add();
}
inline void Array::add_rownames(const ::std::string& value) {
  rownames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.rownames)
}
#if LANG_CXX11
inline void Array::add_rownames(::std::string&& value) {
  rownames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.rownames)
}
#endif
inline void Array::add_rownames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rownames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BERTBuffers.Array.rownames)
}
inline void Array::add_rownames(const char* value, size_t size) {
  rownames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BERTBuffers.Array.rownames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Array::rownames() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Array.rownames)
  return rownames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Array::mutable_rownames() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Array.rownames)
  return &rownames_;
}

// repeated string colnames = 5;
inline int Array::colnames_size() const {
  return colnames_.size();
}
inline void Array::clear_colnames() {
  colnames_.Clear();
}
inline const ::std::string& Array::colnames(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Array.colnames)
  return colnames_.Get(index);
}
inline ::std::string* Array::mutable_colnames(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Array.colnames)
  return colnames_.Mutable(index);
}
inline void Array::set_colnames(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.colnames)
  colnames_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Array::set_colnames(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Array.colnames)
  colnames_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Array::set_colnames(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  colnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Array.colnames)
}
inline void Array::set_colnames(int index, const char* value, size_t size) {
  colnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Array.colnames)
}
inline ::std::string* Array::add_colnames() {
  // @@protoc_insertion_point(field_add_mutable:BERTBuffers.Array.colnames)
  return colnames_.Add();
}
inline void Array::add_colnames(const ::std::string& value) {
  colnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.colnames)
}
#if LANG_CXX11
inline void Array::add_colnames(::std::string&& value) {
  colnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BERTBuffers.Array.colnames)
}
#endif
inline void Array::add_colnames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  colnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BERTBuffers.Array.colnames)
}
inline void Array::add_colnames(const char* value, size_t size) {
  colnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BERTBuffers.Array.colnames)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Array::colnames() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Array.colnames)
  return colnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Array::mutable_colnames() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Array.colnames)
  return &colnames_;
}

// -------------------------------------------------------------------

// Error

// .BERTBuffers.ErrorType type = 1;
inline void Error::clear_type() {
  type_ = 0;
}
inline ::BERTBuffers::ErrorType Error::type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Error.type)
  return static_cast< ::BERTBuffers::ErrorType >(type_);
}
inline void Error::set_type(::BERTBuffers::ErrorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Error.type)
}

// string message = 2;
inline void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Error.message)
  return message_.GetNoArena();
}
inline void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Error.message)
}
#if LANG_CXX11
inline void Error::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Error.message)
}
#endif
inline void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Error.message)
}
inline void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Error.message)
}
inline ::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Error.message)
}

// -------------------------------------------------------------------

// SheetReference

// uint32 start_row = 1;
inline void SheetReference::clear_start_row() {
  start_row_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::start_row() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.start_row)
  return start_row_;
}
inline void SheetReference::set_start_row(::google::protobuf::uint32 value) {
  
  start_row_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.start_row)
}

// uint32 start_column = 2;
inline void SheetReference::clear_start_column() {
  start_column_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::start_column() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.start_column)
  return start_column_;
}
inline void SheetReference::set_start_column(::google::protobuf::uint32 value) {
  
  start_column_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.start_column)
}

// uint32 end_row = 3;
inline void SheetReference::clear_end_row() {
  end_row_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::end_row() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.end_row)
  return end_row_;
}
inline void SheetReference::set_end_row(::google::protobuf::uint32 value) {
  
  end_row_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.end_row)
}

// uint32 end_column = 4;
inline void SheetReference::clear_end_column() {
  end_column_ = 0u;
}
inline ::google::protobuf::uint32 SheetReference::end_column() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.end_column)
  return end_column_;
}
inline void SheetReference::set_end_column(::google::protobuf::uint32 value) {
  
  end_column_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.end_column)
}

// uint64 sheet_id = 5;
inline void SheetReference::clear_sheet_id() {
  sheet_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SheetReference::sheet_id() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.SheetReference.sheet_id)
  return sheet_id_;
}
inline void SheetReference::set_sheet_id(::google::protobuf::uint64 value) {
  
  sheet_id_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.SheetReference.sheet_id)
}

// -------------------------------------------------------------------

// Variable

// bool nil = 1;
inline bool Variable::has_nil() const {
  return value_case() == kNil;
}
inline void Variable::set_has_nil() {
  _oneof_case_[0] = kNil;
}
inline void Variable::clear_nil() {
  if (has_nil()) {
    value_.nil_ = false;
    clear_has_value();
  }
}
inline bool Variable::nil() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.nil)
  if (has_nil()) {
    return value_.nil_;
  }
  return false;
}
inline void Variable::set_nil(bool value) {
  if (!has_nil()) {
    clear_value();
    set_has_nil();
  }
  value_.nil_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.nil)
}

// bool missing = 2;
inline bool Variable::has_missing() const {
  return value_case() == kMissing;
}
inline void Variable::set_has_missing() {
  _oneof_case_[0] = kMissing;
}
inline void Variable::clear_missing() {
  if (has_missing()) {
    value_.missing_ = false;
    clear_has_value();
  }
}
inline bool Variable::missing() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.missing)
  if (has_missing()) {
    return value_.missing_;
  }
  return false;
}
inline void Variable::set_missing(bool value) {
  if (!has_missing()) {
    clear_value();
    set_has_missing();
  }
  value_.missing_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.missing)
}

// .BERTBuffers.Error err = 3;
inline bool Variable::has_err() const {
  return value_case() == kErr;
}
inline void Variable::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void Variable::clear_err() {
  if (has_err()) {
    delete value_.err_;
    clear_has_value();
  }
}
inline ::BERTBuffers::Error* Variable::release_err() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.err)
  if (has_err()) {
    clear_has_value();
      ::BERTBuffers::Error* temp = value_.err_;
    value_.err_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Error& Variable::err() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.err)
  return has_err()
      ? *value_.err_
      : *reinterpret_cast< ::BERTBuffers::Error*>(&::BERTBuffers::_Error_default_instance_);
}
inline ::BERTBuffers::Error* Variable::mutable_err() {
  if (!has_err()) {
    clear_value();
    set_has_err();
    value_.err_ = new ::BERTBuffers::Error;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.err)
  return value_.err_;
}

// double num = 4;
inline bool Variable::has_num() const {
  return value_case() == kNum;
}
inline void Variable::set_has_num() {
  _oneof_case_[0] = kNum;
}
inline void Variable::clear_num() {
  if (has_num()) {
    value_.num_ = 0;
    clear_has_value();
  }
}
inline double Variable::num() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.num)
  if (has_num()) {
    return value_.num_;
  }
  return 0;
}
inline void Variable::set_num(double value) {
  if (!has_num()) {
    clear_value();
    set_has_num();
  }
  value_.num_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.num)
}

// string str = 5;
inline bool Variable::has_str() const {
  return value_case() == kStr;
}
inline void Variable::set_has_str() {
  _oneof_case_[0] = kStr;
}
inline void Variable::clear_str() {
  if (has_str()) {
    value_.str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& Variable::str() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.str)
  if (has_str()) {
    return value_.str_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Variable::set_str(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.str)
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.str)
}
#if LANG_CXX11
inline void Variable::set_str(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.str)
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Variable.str)
}
#endif
inline void Variable::set_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Variable.str)
}
inline void Variable::set_str(const char* value, size_t size) {
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Variable.str)
}
inline ::std::string* Variable::mutable_str() {
  if (!has_str()) {
    clear_value();
    set_has_str();
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.str)
  return value_.str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_str() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.str)
  if (has_str()) {
    clear_has_value();
    return value_.str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Variable::set_allocated_str(::std::string* str) {
  if (!has_str()) {
    value_.str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (str != NULL) {
    set_has_str();
    value_.str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        str);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Variable.str)
}

// bool boolean = 6;
inline bool Variable::has_boolean() const {
  return value_case() == kBoolean;
}
inline void Variable::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Variable::clear_boolean() {
  if (has_boolean()) {
    value_.boolean_ = false;
    clear_has_value();
  }
}
inline bool Variable::boolean() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.boolean)
  if (has_boolean()) {
    return value_.boolean_;
  }
  return false;
}
inline void Variable::set_boolean(bool value) {
  if (!has_boolean()) {
    clear_value();
    set_has_boolean();
  }
  value_.boolean_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.boolean)
}

// .BERTBuffers.Complex cpx = 7;
inline bool Variable::has_cpx() const {
  return value_case() == kCpx;
}
inline void Variable::set_has_cpx() {
  _oneof_case_[0] = kCpx;
}
inline void Variable::clear_cpx() {
  if (has_cpx()) {
    delete value_.cpx_;
    clear_has_value();
  }
}
inline ::BERTBuffers::Complex* Variable::release_cpx() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.cpx)
  if (has_cpx()) {
    clear_has_value();
      ::BERTBuffers::Complex* temp = value_.cpx_;
    value_.cpx_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Complex& Variable::cpx() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.cpx)
  return has_cpx()
      ? *value_.cpx_
      : *reinterpret_cast< ::BERTBuffers::Complex*>(&::BERTBuffers::_Complex_default_instance_);
}
inline ::BERTBuffers::Complex* Variable::mutable_cpx() {
  if (!has_cpx()) {
    clear_value();
    set_has_cpx();
    value_.cpx_ = new ::BERTBuffers::Complex;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.cpx)
  return value_.cpx_;
}

// .BERTBuffers.Array arr = 8;
inline bool Variable::has_arr() const {
  return value_case() == kArr;
}
inline void Variable::set_has_arr() {
  _oneof_case_[0] = kArr;
}
inline void Variable::clear_arr() {
  if (has_arr()) {
    delete value_.arr_;
    clear_has_value();
  }
}
inline ::BERTBuffers::Array* Variable::release_arr() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.arr)
  if (has_arr()) {
    clear_has_value();
      ::BERTBuffers::Array* temp = value_.arr_;
    value_.arr_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Array& Variable::arr() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.arr)
  return has_arr()
      ? *value_.arr_
      : *reinterpret_cast< ::BERTBuffers::Array*>(&::BERTBuffers::_Array_default_instance_);
}
inline ::BERTBuffers::Array* Variable::mutable_arr() {
  if (!has_arr()) {
    clear_value();
    set_has_arr();
    value_.arr_ = new ::BERTBuffers::Array;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.arr)
  return value_.arr_;
}

// .BERTBuffers.SheetReference ref = 9;
inline bool Variable::has_ref() const {
  return value_case() == kRef;
}
inline void Variable::set_has_ref() {
  _oneof_case_[0] = kRef;
}
inline void Variable::clear_ref() {
  if (has_ref()) {
    delete value_.ref_;
    clear_has_value();
  }
}
inline ::BERTBuffers::SheetReference* Variable::release_ref() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.ref)
  if (has_ref()) {
    clear_has_value();
      ::BERTBuffers::SheetReference* temp = value_.ref_;
    value_.ref_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::SheetReference& Variable::ref() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.ref)
  return has_ref()
      ? *value_.ref_
      : *reinterpret_cast< ::BERTBuffers::SheetReference*>(&::BERTBuffers::_SheetReference_default_instance_);
}
inline ::BERTBuffers::SheetReference* Variable::mutable_ref() {
  if (!has_ref()) {
    clear_value();
    set_has_ref();
    value_.ref_ = new ::BERTBuffers::SheetReference;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.ref)
  return value_.ref_;
}

// uint64 external_pointer = 10;
inline bool Variable::has_external_pointer() const {
  return value_case() == kExternalPointer;
}
inline void Variable::set_has_external_pointer() {
  _oneof_case_[0] = kExternalPointer;
}
inline void Variable::clear_external_pointer() {
  if (has_external_pointer()) {
    value_.external_pointer_ = GOOGLE_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::uint64 Variable::external_pointer() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.external_pointer)
  if (has_external_pointer()) {
    return value_.external_pointer_;
  }
  return GOOGLE_ULONGLONG(0);
}
inline void Variable::set_external_pointer(::google::protobuf::uint64 value) {
  if (!has_external_pointer()) {
    clear_value();
    set_has_external_pointer();
  }
  value_.external_pointer_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.external_pointer)
}

// string name = 15;
inline void Variable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::name() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Variable.name)
  return name_.GetNoArena();
}
inline void Variable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Variable.name)
}
#if LANG_CXX11
inline void Variable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Variable.name)
}
#endif
inline void Variable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Variable.name)
}
inline void Variable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Variable.name)
}
inline ::std::string* Variable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Variable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_name() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Variable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Variable.name)
}

inline bool Variable::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Variable::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Variable::ValueCase Variable::value_case() const {
  return Variable::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Code

// repeated string line = 1;
inline int Code::line_size() const {
  return line_.size();
}
inline void Code::clear_line() {
  line_.Clear();
}
inline const ::std::string& Code::line(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Code.line)
  return line_.Get(index);
}
inline ::std::string* Code::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Code.line)
  return line_.Mutable(index);
}
inline void Code::set_line(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Code.line)
  line_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Code::set_line(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Code.line)
  line_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Code::set_line(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  line_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Code.line)
}
inline void Code::set_line(int index, const char* value, size_t size) {
  line_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Code.line)
}
inline ::std::string* Code::add_line() {
  // @@protoc_insertion_point(field_add_mutable:BERTBuffers.Code.line)
  return line_.Add();
}
inline void Code::add_line(const ::std::string& value) {
  line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BERTBuffers.Code.line)
}
#if LANG_CXX11
inline void Code::add_line(::std::string&& value) {
  line_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BERTBuffers.Code.line)
}
#endif
inline void Code::add_line(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  line_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BERTBuffers.Code.line)
}
inline void Code::add_line(const char* value, size_t size) {
  line_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BERTBuffers.Code.line)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Code::line() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.Code.line)
  return line_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Code::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.Code.line)
  return &line_;
}

// -------------------------------------------------------------------

// FunctionCall

// string function = 1;
inline void FunctionCall::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FunctionCall::function() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionCall.function)
  return function_.GetNoArena();
}
inline void FunctionCall::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.FunctionCall.function)
}
#if LANG_CXX11
inline void FunctionCall::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.FunctionCall.function)
}
#endif
inline void FunctionCall::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.FunctionCall.function)
}
inline void FunctionCall::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.FunctionCall.function)
}
inline ::std::string* FunctionCall::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionCall.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FunctionCall::release_function() {
  // @@protoc_insertion_point(field_release:BERTBuffers.FunctionCall.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FunctionCall::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.FunctionCall.function)
}

// repeated .BERTBuffers.Variable arguments = 2;
inline int FunctionCall::arguments_size() const {
  return arguments_.size();
}
inline void FunctionCall::clear_arguments() {
  arguments_.Clear();
}
inline const ::BERTBuffers::Variable& FunctionCall::arguments(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.FunctionCall.arguments)
  return arguments_.Get(index);
}
inline ::BERTBuffers::Variable* FunctionCall::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.FunctionCall.arguments)
  return arguments_.Mutable(index);
}
inline ::BERTBuffers::Variable* FunctionCall::add_arguments() {
  // @@protoc_insertion_point(field_add:BERTBuffers.FunctionCall.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
FunctionCall::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.FunctionCall.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
FunctionCall::arguments() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.FunctionCall.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// COMFunctionCall

// string function = 1;
inline void COMFunctionCall::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& COMFunctionCall::function() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.COMFunctionCall.function)
  return function_.GetNoArena();
}
inline void COMFunctionCall::set_function(const ::std::string& value) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.COMFunctionCall.function)
}
#if LANG_CXX11
inline void COMFunctionCall::set_function(::std::string&& value) {
  
  function_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.COMFunctionCall.function)
}
#endif
inline void COMFunctionCall::set_function(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.COMFunctionCall.function)
}
inline void COMFunctionCall::set_function(const char* value, size_t size) {
  
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.COMFunctionCall.function)
}
inline ::std::string* COMFunctionCall::mutable_function() {
  
  // @@protoc_insertion_point(field_mutable:BERTBuffers.COMFunctionCall.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COMFunctionCall::release_function() {
  // @@protoc_insertion_point(field_release:BERTBuffers.COMFunctionCall.function)
  
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COMFunctionCall::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    
  } else {
    
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.COMFunctionCall.function)
}

// uint32 pointer = 2;
inline void COMFunctionCall::clear_pointer() {
  pointer_ = 0u;
}
inline ::google::protobuf::uint32 COMFunctionCall::pointer() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.COMFunctionCall.pointer)
  return pointer_;
}
inline void COMFunctionCall::set_pointer(::google::protobuf::uint32 value) {
  
  pointer_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.COMFunctionCall.pointer)
}

// uint32 index = 3;
inline void COMFunctionCall::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 COMFunctionCall::index() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.COMFunctionCall.index)
  return index_;
}
inline void COMFunctionCall::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.COMFunctionCall.index)
}

// .BERTBuffers.CallType type = 4;
inline void COMFunctionCall::clear_type() {
  type_ = 0;
}
inline ::BERTBuffers::CallType COMFunctionCall::type() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.COMFunctionCall.type)
  return static_cast< ::BERTBuffers::CallType >(type_);
}
inline void COMFunctionCall::set_type(::BERTBuffers::CallType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.COMFunctionCall.type)
}

// repeated .BERTBuffers.Variable arguments = 5;
inline int COMFunctionCall::arguments_size() const {
  return arguments_.size();
}
inline void COMFunctionCall::clear_arguments() {
  arguments_.Clear();
}
inline const ::BERTBuffers::Variable& COMFunctionCall::arguments(int index) const {
  // @@protoc_insertion_point(field_get:BERTBuffers.COMFunctionCall.arguments)
  return arguments_.Get(index);
}
inline ::BERTBuffers::Variable* COMFunctionCall::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:BERTBuffers.COMFunctionCall.arguments)
  return arguments_.Mutable(index);
}
inline ::BERTBuffers::Variable* COMFunctionCall::add_arguments() {
  // @@protoc_insertion_point(field_add:BERTBuffers.COMFunctionCall.arguments)
  return arguments_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >*
COMFunctionCall::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:BERTBuffers.COMFunctionCall.arguments)
  return &arguments_;
}
inline const ::google::protobuf::RepeatedPtrField< ::BERTBuffers::Variable >&
COMFunctionCall::arguments() const {
  // @@protoc_insertion_point(field_list:BERTBuffers.COMFunctionCall.arguments)
  return arguments_;
}

// -------------------------------------------------------------------

// Call

// uint32 id = 1;
inline void Call::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Call::id() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.id)
  return id_;
}
inline void Call::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.id)
}

// bool wait = 2;
inline void Call::clear_wait() {
  wait_ = false;
}
inline bool Call::wait() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.wait)
  return wait_;
}
inline void Call::set_wait(bool value) {
  
  wait_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.wait)
}

// string system_command = 3;
inline bool Call::has_system_command() const {
  return call_case() == kSystemCommand;
}
inline void Call::set_has_system_command() {
  _oneof_case_[0] = kSystemCommand;
}
inline void Call::clear_system_command() {
  if (has_system_command()) {
    call_.system_command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_call();
  }
}
inline const ::std::string& Call::system_command() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.system_command)
  if (has_system_command()) {
    return call_.system_command_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Call::set_system_command(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.system_command)
  if (!has_system_command()) {
    clear_call();
    set_has_system_command();
    call_.system_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.system_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.system_command)
}
#if LANG_CXX11
inline void Call::set_system_command(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.system_command)
  if (!has_system_command()) {
    clear_call();
    set_has_system_command();
    call_.system_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.system_command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Call.system_command)
}
#endif
inline void Call::set_system_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_system_command()) {
    clear_call();
    set_has_system_command();
    call_.system_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.system_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Call.system_command)
}
inline void Call::set_system_command(const char* value, size_t size) {
  if (!has_system_command()) {
    clear_call();
    set_has_system_command();
    call_.system_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.system_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Call.system_command)
}
inline ::std::string* Call::mutable_system_command() {
  if (!has_system_command()) {
    clear_call();
    set_has_system_command();
    call_.system_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Call.system_command)
  return call_.system_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_system_command() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Call.system_command)
  if (has_system_command()) {
    clear_has_call();
    return call_.system_command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Call::set_allocated_system_command(::std::string* system_command) {
  if (!has_system_command()) {
    call_.system_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_call();
  if (system_command != NULL) {
    set_has_system_command();
    call_.system_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        system_command);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Call.system_command)
}

// .BERTBuffers.FunctionCall function_call = 4;
inline bool Call::has_function_call() const {
  return call_case() == kFunctionCall;
}
inline void Call::set_has_function_call() {
  _oneof_case_[0] = kFunctionCall;
}
inline void Call::clear_function_call() {
  if (has_function_call()) {
    delete call_.function_call_;
    clear_has_call();
  }
}
inline ::BERTBuffers::FunctionCall* Call::release_function_call() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Call.function_call)
  if (has_function_call()) {
    clear_has_call();
      ::BERTBuffers::FunctionCall* temp = call_.function_call_;
    call_.function_call_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::FunctionCall& Call::function_call() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.function_call)
  return has_function_call()
      ? *call_.function_call_
      : *reinterpret_cast< ::BERTBuffers::FunctionCall*>(&::BERTBuffers::_FunctionCall_default_instance_);
}
inline ::BERTBuffers::FunctionCall* Call::mutable_function_call() {
  if (!has_function_call()) {
    clear_call();
    set_has_function_call();
    call_.function_call_ = new ::BERTBuffers::FunctionCall;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Call.function_call)
  return call_.function_call_;
}

// .BERTBuffers.Code code = 5;
inline bool Call::has_code() const {
  return call_case() == kCode;
}
inline void Call::set_has_code() {
  _oneof_case_[0] = kCode;
}
inline void Call::clear_code() {
  if (has_code()) {
    delete call_.code_;
    clear_has_call();
  }
}
inline ::BERTBuffers::Code* Call::release_code() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Call.code)
  if (has_code()) {
    clear_has_call();
      ::BERTBuffers::Code* temp = call_.code_;
    call_.code_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Code& Call::code() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.code)
  return has_code()
      ? *call_.code_
      : *reinterpret_cast< ::BERTBuffers::Code*>(&::BERTBuffers::_Code_default_instance_);
}
inline ::BERTBuffers::Code* Call::mutable_code() {
  if (!has_code()) {
    clear_call();
    set_has_code();
    call_.code_ = new ::BERTBuffers::Code;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Call.code)
  return call_.code_;
}

// string shell_command = 6;
inline bool Call::has_shell_command() const {
  return call_case() == kShellCommand;
}
inline void Call::set_has_shell_command() {
  _oneof_case_[0] = kShellCommand;
}
inline void Call::clear_shell_command() {
  if (has_shell_command()) {
    call_.shell_command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_call();
  }
}
inline const ::std::string& Call::shell_command() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.shell_command)
  if (has_shell_command()) {
    return call_.shell_command_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Call::set_shell_command(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.shell_command)
  if (!has_shell_command()) {
    clear_call();
    set_has_shell_command();
    call_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.shell_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.shell_command)
}
#if LANG_CXX11
inline void Call::set_shell_command(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Call.shell_command)
  if (!has_shell_command()) {
    clear_call();
    set_has_shell_command();
    call_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.shell_command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Call.shell_command)
}
#endif
inline void Call::set_shell_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_shell_command()) {
    clear_call();
    set_has_shell_command();
    call_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.shell_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Call.shell_command)
}
inline void Call::set_shell_command(const char* value, size_t size) {
  if (!has_shell_command()) {
    clear_call();
    set_has_shell_command();
    call_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  call_.shell_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Call.shell_command)
}
inline ::std::string* Call::mutable_shell_command() {
  if (!has_shell_command()) {
    clear_call();
    set_has_shell_command();
    call_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Call.shell_command)
  return call_.shell_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_shell_command() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Call.shell_command)
  if (has_shell_command()) {
    clear_has_call();
    return call_.shell_command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Call::set_allocated_shell_command(::std::string* shell_command) {
  if (!has_shell_command()) {
    call_.shell_command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_call();
  if (shell_command != NULL) {
    set_has_shell_command();
    call_.shell_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        shell_command);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Call.shell_command)
}

// .BERTBuffers.FunctionCall callback = 7;
inline bool Call::has_callback() const {
  return call_case() == kCallback;
}
inline void Call::set_has_callback() {
  _oneof_case_[0] = kCallback;
}
inline void Call::clear_callback() {
  if (has_callback()) {
    delete call_.callback_;
    clear_has_call();
  }
}
inline ::BERTBuffers::FunctionCall* Call::release_callback() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Call.callback)
  if (has_callback()) {
    clear_has_call();
      ::BERTBuffers::FunctionCall* temp = call_.callback_;
    call_.callback_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::FunctionCall& Call::callback() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.callback)
  return has_callback()
      ? *call_.callback_
      : *reinterpret_cast< ::BERTBuffers::FunctionCall*>(&::BERTBuffers::_FunctionCall_default_instance_);
}
inline ::BERTBuffers::FunctionCall* Call::mutable_callback() {
  if (!has_callback()) {
    clear_call();
    set_has_callback();
    call_.callback_ = new ::BERTBuffers::FunctionCall;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Call.callback)
  return call_.callback_;
}

// .BERTBuffers.COMFunctionCall com_callback = 8;
inline bool Call::has_com_callback() const {
  return call_case() == kComCallback;
}
inline void Call::set_has_com_callback() {
  _oneof_case_[0] = kComCallback;
}
inline void Call::clear_com_callback() {
  if (has_com_callback()) {
    delete call_.com_callback_;
    clear_has_call();
  }
}
inline ::BERTBuffers::COMFunctionCall* Call::release_com_callback() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Call.com_callback)
  if (has_com_callback()) {
    clear_has_call();
      ::BERTBuffers::COMFunctionCall* temp = call_.com_callback_;
    call_.com_callback_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::COMFunctionCall& Call::com_callback() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Call.com_callback)
  return has_com_callback()
      ? *call_.com_callback_
      : *reinterpret_cast< ::BERTBuffers::COMFunctionCall*>(&::BERTBuffers::_COMFunctionCall_default_instance_);
}
inline ::BERTBuffers::COMFunctionCall* Call::mutable_com_callback() {
  if (!has_com_callback()) {
    clear_call();
    set_has_com_callback();
    call_.com_callback_ = new ::BERTBuffers::COMFunctionCall;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Call.com_callback)
  return call_.com_callback_;
}

inline bool Call::has_call() const {
  return call_case() != CALL_NOT_SET;
}
inline void Call::clear_has_call() {
  _oneof_case_[0] = CALL_NOT_SET;
}
inline Call::CallCase Call::call_case() const {
  return Call::CallCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Console

// string text = 1;
inline bool Console::has_text() const {
  return message_case() == kText;
}
inline void Console::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void Console::clear_text() {
  if (has_text()) {
    message_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& Console::text() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.text)
  if (has_text()) {
    return message_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Console::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.text)
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.text)
}
#if LANG_CXX11
inline void Console::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.text)
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Console.text)
}
#endif
inline void Console::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Console.text)
}
inline void Console::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Console.text)
}
inline ::std::string* Console::mutable_text() {
  if (!has_text()) {
    clear_message();
    set_has_text();
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.text)
  return message_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Console::release_text() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.text)
  if (has_text()) {
    clear_has_message();
    return message_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Console::set_allocated_text(::std::string* text) {
  if (!has_text()) {
    message_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (text != NULL) {
    set_has_text();
    message_.text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        text);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Console.text)
}

// string err = 2;
inline bool Console::has_err() const {
  return message_case() == kErr;
}
inline void Console::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void Console::clear_err() {
  if (has_err()) {
    message_.err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& Console::err() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.err)
  if (has_err()) {
    return message_.err_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Console::set_err(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.err)
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.err)
}
#if LANG_CXX11
inline void Console::set_err(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.err)
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Console.err)
}
#endif
inline void Console::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Console.err)
}
inline void Console::set_err(const char* value, size_t size) {
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Console.err)
}
inline ::std::string* Console::mutable_err() {
  if (!has_err()) {
    clear_message();
    set_has_err();
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.err)
  return message_.err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Console::release_err() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.err)
  if (has_err()) {
    clear_has_message();
    return message_.err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Console::set_allocated_err(::std::string* err) {
  if (!has_err()) {
    message_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (err != NULL) {
    set_has_err();
    message_.err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        err);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Console.err)
}

// string prompt = 3;
inline bool Console::has_prompt() const {
  return message_case() == kPrompt;
}
inline void Console::set_has_prompt() {
  _oneof_case_[0] = kPrompt;
}
inline void Console::clear_prompt() {
  if (has_prompt()) {
    message_.prompt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_message();
  }
}
inline const ::std::string& Console::prompt() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Console.prompt)
  if (has_prompt()) {
    return message_.prompt_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Console::set_prompt(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.prompt)
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.prompt)
}
#if LANG_CXX11
inline void Console::set_prompt(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Console.prompt)
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Console.prompt)
}
#endif
inline void Console::set_prompt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Console.prompt)
}
inline void Console::set_prompt(const char* value, size_t size) {
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  message_.prompt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Console.prompt)
}
inline ::std::string* Console::mutable_prompt() {
  if (!has_prompt()) {
    clear_message();
    set_has_prompt();
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Console.prompt)
  return message_.prompt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Console::release_prompt() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Console.prompt)
  if (has_prompt()) {
    clear_has_message();
    return message_.prompt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Console::set_allocated_prompt(::std::string* prompt) {
  if (!has_prompt()) {
    message_.prompt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_message();
  if (prompt != NULL) {
    set_has_prompt();
    message_.prompt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        prompt);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Console.prompt)
}

inline bool Console::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Console::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Console::MessageCase Console::message_case() const {
  return Console::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// uint32 id = 1;
inline void Response::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Response::id() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Response.id)
  return id_;
}
inline void Response::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.id)
}

// string err = 2;
inline bool Response::has_err() const {
  return result_case() == kErr;
}
inline void Response::set_has_err() {
  _oneof_case_[0] = kErr;
}
inline void Response::clear_err() {
  if (has_err()) {
    result_.err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_result();
  }
}
inline const ::std::string& Response::err() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Response.err)
  if (has_err()) {
    return result_.err_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Response::set_err(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.err)
  if (!has_err()) {
    clear_result();
    set_has_err();
    result_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.err)
}
#if LANG_CXX11
inline void Response::set_err(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.err)
  if (!has_err()) {
    clear_result();
    set_has_err();
    result_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Response.err)
}
#endif
inline void Response::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_err()) {
    clear_result();
    set_has_err();
    result_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Response.err)
}
inline void Response::set_err(const char* value, size_t size) {
  if (!has_err()) {
    clear_result();
    set_has_err();
    result_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Response.err)
}
inline ::std::string* Response::mutable_err() {
  if (!has_err()) {
    clear_result();
    set_has_err();
    result_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Response.err)
  return result_.err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_err() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Response.err)
  if (has_err()) {
    clear_has_result();
    return result_.err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_err(::std::string* err) {
  if (!has_err()) {
    result_.err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_result();
  if (err != NULL) {
    set_has_err();
    result_.err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        err);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Response.err)
}

// .BERTBuffers.Variable value = 3;
inline bool Response::has_value() const {
  return result_case() == kValue;
}
inline void Response::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Response::clear_value() {
  if (has_value()) {
    delete result_.value_;
    clear_has_result();
  }
}
inline ::BERTBuffers::Variable* Response::release_value() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Response.value)
  if (has_value()) {
    clear_has_result();
      ::BERTBuffers::Variable* temp = result_.value_;
    result_.value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Variable& Response::value() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Response.value)
  return has_value()
      ? *result_.value_
      : *reinterpret_cast< ::BERTBuffers::Variable*>(&::BERTBuffers::_Variable_default_instance_);
}
inline ::BERTBuffers::Variable* Response::mutable_value() {
  if (!has_value()) {
    clear_result();
    set_has_value();
    result_.value_ = new ::BERTBuffers::Variable;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Response.value)
  return result_.value_;
}

// .BERTBuffers.Console console = 4;
inline bool Response::has_console() const {
  return result_case() == kConsole;
}
inline void Response::set_has_console() {
  _oneof_case_[0] = kConsole;
}
inline void Response::clear_console() {
  if (has_console()) {
    delete result_.console_;
    clear_has_result();
  }
}
inline ::BERTBuffers::Console* Response::release_console() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Response.console)
  if (has_console()) {
    clear_has_result();
      ::BERTBuffers::Console* temp = result_.console_;
    result_.console_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::Console& Response::console() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Response.console)
  return has_console()
      ? *result_.console_
      : *reinterpret_cast< ::BERTBuffers::Console*>(&::BERTBuffers::_Console_default_instance_);
}
inline ::BERTBuffers::Console* Response::mutable_console() {
  if (!has_console()) {
    clear_result();
    set_has_console();
    result_.console_ = new ::BERTBuffers::Console;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Response.console)
  return result_.console_;
}

// string control_message = 5;
inline bool Response::has_control_message() const {
  return result_case() == kControlMessage;
}
inline void Response::set_has_control_message() {
  _oneof_case_[0] = kControlMessage;
}
inline void Response::clear_control_message() {
  if (has_control_message()) {
    result_.control_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_result();
  }
}
inline const ::std::string& Response::control_message() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Response.control_message)
  if (has_control_message()) {
    return result_.control_message_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Response::set_control_message(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.control_message)
  if (!has_control_message()) {
    clear_result();
    set_has_control_message();
    result_.control_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.control_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.control_message)
}
#if LANG_CXX11
inline void Response::set_control_message(::std::string&& value) {
  // @@protoc_insertion_point(field_set:BERTBuffers.Response.control_message)
  if (!has_control_message()) {
    clear_result();
    set_has_control_message();
    result_.control_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.control_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BERTBuffers.Response.control_message)
}
#endif
inline void Response::set_control_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_control_message()) {
    clear_result();
    set_has_control_message();
    result_.control_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.control_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BERTBuffers.Response.control_message)
}
inline void Response::set_control_message(const char* value, size_t size) {
  if (!has_control_message()) {
    clear_result();
    set_has_control_message();
    result_.control_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  result_.control_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BERTBuffers.Response.control_message)
}
inline ::std::string* Response::mutable_control_message() {
  if (!has_control_message()) {
    clear_result();
    set_has_control_message();
    result_.control_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Response.control_message)
  return result_.control_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_control_message() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Response.control_message)
  if (has_control_message()) {
    clear_has_result();
    return result_.control_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_control_message(::std::string* control_message) {
  if (!has_control_message()) {
    result_.control_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_result();
  if (control_message != NULL) {
    set_has_control_message();
    result_.control_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        control_message);
  }
  // @@protoc_insertion_point(field_set_allocated:BERTBuffers.Response.control_message)
}

// .BERTBuffers.FunctionCall callback = 6;
inline bool Response::has_callback() const {
  return result_case() == kCallback;
}
inline void Response::set_has_callback() {
  _oneof_case_[0] = kCallback;
}
inline void Response::clear_callback() {
  if (has_callback()) {
    delete result_.callback_;
    clear_has_result();
  }
}
inline ::BERTBuffers::FunctionCall* Response::release_callback() {
  // @@protoc_insertion_point(field_release:BERTBuffers.Response.callback)
  if (has_callback()) {
    clear_has_result();
      ::BERTBuffers::FunctionCall* temp = result_.callback_;
    result_.callback_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::BERTBuffers::FunctionCall& Response::callback() const {
  // @@protoc_insertion_point(field_get:BERTBuffers.Response.callback)
  return has_callback()
      ? *result_.callback_
      : *reinterpret_cast< ::BERTBuffers::FunctionCall*>(&::BERTBuffers::_FunctionCall_default_instance_);
}
inline ::BERTBuffers::FunctionCall* Response::mutable_callback() {
  if (!has_callback()) {
    clear_result();
    set_has_callback();
    result_.callback_ = new ::BERTBuffers::FunctionCall;
  }
  // @@protoc_insertion_point(field_mutable:BERTBuffers.Response.callback)
  return result_.callback_;
}

inline bool Response::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void Response::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline Response::ResultCase Response::result_case() const {
  return Response::ResultCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BERTBuffers

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::BERTBuffers::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::Type>() {
  return ::BERTBuffers::Type_descriptor();
}
template <> struct is_proto_enum< ::BERTBuffers::ErrorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::ErrorType>() {
  return ::BERTBuffers::ErrorType_descriptor();
}
template <> struct is_proto_enum< ::BERTBuffers::CallType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BERTBuffers::CallType>() {
  return ::BERTBuffers::CallType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_variable_2eproto__INCLUDED
